{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Manage your customer logins without storing passwords","text":"<ul> <li>Iridium is an enterprise grade system for managing external customer identity and access management into your own systems.</li> <li>The management UI provides a low code interface to integrate any 3rd party identity provider into your own workflow.  </li> <li>Customer passwords are never stored in your database.</li> </ul>"},{"location":"1.-Overview/overview/","title":"What is iridium?","text":"<p>Iridium is an OAuth2.x-compliant identity management system.</p>"},{"location":"1.-Overview/overview/#what-problem-does-it-solve","title":"What problem does it solve?","text":"<p>The OAuth2.x RFC is full of great details, but it mainly focuses on defining the interfaces on how different identity systems can work together.  There are many implementation details in the spec which are not defined on purpose, which requires developers to make the best guess at how security, authentication, authorization, etc should be implemented within their own system.  The goal of the OAuth framework isn\u2019t meant to restrict how implementation should be done, but to allow neighboring systems to be able to exchange data with one another securely.</p> <p>Iridium helps developers secure their applications or systems the right way by providing an opinionated implementation on how to solve identity management for systems of any size.</p>"},{"location":"1.-Overview/overview/#what-do-you-mean-there-are-many-implementation-details-not-defined","title":"What do you mean there are many implementation details not defined?","text":"<p>Study the diagram below that describes how the authorization code grant works, but before you do let\u2019s briefly call out what some of these terms mean.  </p> <ul> <li>Resource owner: The entity that can grant access to a protected resource.  An example is the end-user of an application.  </li> <li>User-agent: any software that helps retrieve, present, and interact with web content.  An example is a web browser  </li> <li>Client: A client is a third-party application that requests access to resources of the resource owner. An example is an Angular or React application.  </li> <li>Authorization server: validates the credentials and redirects the resource owner back to the client with an authorization code. </li> </ul> <ol> <li>The resource owner (end-user) visits a third-party client (web application)  </li> <li>The resource owner selects the \u201csign up with Google\u201d button in the client. The user-agent (browser) directs the resource owner to the Google sign-in page.  </li> <li>The resource owner (end-user) authenticates and authorizes the authorization server to grant access to the resource owner's information (in this case it could be the email address and profile information) to the third-party client.  </li> <li>After the resource owner (end-user) authorizes access, the authorization server redirects the user-agent (browser) back to the original third-party client with an authorization code and typically a state parameter  </li> <li>The third-party client requests an access token with the received authorization code and associated redirect URI  </li> <li>The authorization authenticates the client, validates the authorization code and the accompanying redirect URI matches the URI provided in step D.  If the request is valid the authorization server returns back with an access token and an optional refresh token.  </li> </ol> <p>The OAuth 2.x spec does a great job of giving an overview of how a system is expected to behave under certain circumstances, but it doesn\u2019t tell you how to make the system make decisions behind the scenes to create the expected outcomes.  With iridium, we put the power in your hands to take control of your system.  </p>"},{"location":"1.-Overview/overview/#how-is-the-system-architected","title":"How is the system architected?","text":"<p>Iridium has been built with simplicity in the front of our minds as we build as flexible a model as we can. Iridium is served from a single jar tied to a relational database.  The system expects specific seed data to exist in the database to allow for the system to successfully authenticate, authorize, and provision access tokens to your users.</p> <p></p>"},{"location":"1.-Overview/overview/#tell-me-more-about-the-database-entities","title":"Tell me more about the database entities","text":"<p>As Iridium is a configurable system, there are many details to go through.  At a high level, the important database relationships  are below as follows:</p> <p></p>"},{"location":"2.-Quick-Starts/quickstart-with-angular/","title":"Quickstart with Angular","text":"<p>This quickstart will show you how to secure an Angular application using Iridium. First, you\u2019ll need to navigate to https://conduct.iridium.software to log in to the Iridium management UI. You can choose GitHub or Google as your preferred provider. After authorizing the application you\u2019ll be redirected back to the Iridium UI.</p> <p>From here, select the \u201cCreate Tenant\u201d button.</p> <p></p> <p>When the modal appears you\u2019ll need to enter a tenant name that is unique within the system and URL friendly. This will be the subdomain value specific to your securing your users. For example, if the tenant name you choose is \u201cmy-tenant\u201d then your users will be directed to my-tenant.iridium.software to be logged in.</p> <p>For environment, you can select \u201csandbox\u201d.</p> <p></p> <p>Next, set up your login box.</p> <p></p> <p>We will configure the box to allow your users to use GitHub to log in to your application. Select the \u201cAdd Provider\u201d box to open the modal.</p> <p></p> <p>For the provider select \u201cGitHub\u201d. Fill out the fields with your GitHub application credentials</p> <p></p> <p>Next, we need to register your application for use within your tenant. Select \u201cApplication Management\u201d from the side menu.</p> <p></p> <p>Select \u201cCreate Application\u201d</p> <p></p> <p>Add the following values to the modal that pops up.</p> <p></p> <p>After the application is created, make sure to save the client ID for future reference.</p> <p></p> <p>Next, clone the Iridium Angular starter application and <code>cd</code> into the folder.</p> <pre><code>$ git clone git@github.com:IridiumIdentity/iridium-angular-example.git\n$ cd /iridium-angular-example\n</code></pre> <p>Open the environment.ts file for editing</p> <pre><code>$  vim src/app/environments/environment.ts\n</code></pre> <p>The environment.ts file should look like this:</p> <pre><code>export const environment = {\n  production: false,\n  iridium: {\n    domain: 'https://ENTER_YOUR_TENANT_NAME_HERE.iridium.software/',\n    redirectUri: 'http://localhost:4300/callback',\n    clientId: 'ENTER_YOUR_CLIENT_ID_HERE',\n    errorPath: '/error'\n  }\n};\n~\n</code></pre> <ul> <li>Replace \u201cENTER_YOUR_TENANT_NAME_HERE\u201d with the tenant name you created earlier</li> <li>Replace \u201cENTER_YOUR_CLIENT_ID_HERE\u201d with the application id generated earlier</li> </ul> <p>Run your application</p> <pre><code>npm install &amp;&amp; ng serve\n</code></pre> <p>Navigate to <code>localhost:4300</code>, select login in the top menu bar.</p> <p></p> <p>You should be redirected to your personalized login domain. Select \u201cLogin With GitHub\u201d</p> <p></p> <p>You\u2019ll be redirected to GitHub. The view should show details specific to the application you registered with GitHub.</p> <p></p> <p>(If you ever want to revoke the gitHub authorization, refer to this documentation)</p> <p>Select \u201cAuthorize ${your-github-name}\u201d and you should be redirected back to your angular application with confirmation of successful authorization.</p> <p></p> <p>Congratulations, you have successfully registered and secured an application with Iridium! This project is still in its early stages, we\u2019d like you to join us. If you have any comments, questions, or concerns (maybe a new framework client built for you) join the community in GitHub discussions here: https://github.com/orgs/IridiumIdentity/discussions.</p>"},{"location":"2.-Quick-Starts/revoking-github-authorization/","title":"Revoking github authorization","text":"<p>Below outline the steps required to revoke the Iridium app from GitHub</p> <ol> <li>Log into you Github Account</li> <li>Click on the settings icon on the sidebar</li> <li>Search and click on the Applications settings under the Integrations section</li> </ol> <p></p> <ol> <li>Find your Iridium application and click on the corresponding configure button    (You might be asked to enter the password at this point to authenticate the user)</li> <li>Find the Uninstall button in the Danger Zone section of the settings</li> </ol> <p></p> <p>For further help, refer to the official GitHub documentation</p>"},{"location":"3.-Running-Locally/1.Install-the-CLI/","title":"Install the CLI","text":""},{"location":"3.-Running-Locally/1.Install-the-CLI/#youll-need-the-following-to-run-iridium-locally","title":"You'll need the following to run iridium locally:","text":"<ul> <li>Node 18</li> <li>Java 17</li> <li>Docker</li> </ul>"},{"location":"3.-Running-Locally/1.Install-the-CLI/#download-the-release-package","title":"Download the release package:","text":"<pre><code>$ wget https://github.com/IridiumIdentity/iridium/releases/download/v0.2.1/iridium-0.2.1-bin.tar.gz\n</code></pre>"},{"location":"3.-Running-Locally/1.Install-the-CLI/#unzip-the-package","title":"Unzip the package","text":"<pre><code>$ tar -xzf iridium-0.2.1-bin.tar.gz\n</code></pre> <p>For the rest of this setup all commands are run from the root of the distribution folder, so switch to it:</p> <pre><code>$ cd iridium-0.2.1-bin\n</code></pre>"},{"location":"3.-Running-Locally/1.Install-the-CLI/#verify-installation","title":"Verify Installation","text":"<p>You can check that you successfully installed iridium by executing the cli tool</p> <pre><code>$ bin/iridium --help\n</code></pre> <p>Your output should be similar to the following</p> <pre><code>bin/iridium --help\nUsage: iridium [-hV] [COMMAND]\niridium management cli\n  -h, --help      Show this help message and exit.\n  -V, --version   Print version information and exit.\nCommands:\n  init  inits the system\n  run   run iridium\n</code></pre>"},{"location":"3.-Running-Locally/1.Install-the-CLI/#list-the-contents-of-the-file-by-executing","title":"List the contents of the file by executing","text":"<pre><code>ls -1f\n</code></pre>"},{"location":"3.-Running-Locally/1.Install-the-CLI/#the-following-directories-and-files-are-created","title":"The following directories and files are created","text":"<pre><code>tools\nLICENSE\nbin\nbootIridium.sh\niridium-angular-client\nREADME.md\nlib\nconf\n</code></pre> <p>Descriptions of each file or folder are below; |Directory / File | Description | ||| | <code>tools</code> | holds tool configurations to help Iridium run, e.g. Docker Compose | | <code>conf</code>  | Configuration files for Iridium | | <code>lib</code> | jars used by Iridium | | <code>bin</code> | the <code>iridium</code> entry point |</p> <p>Now you can stand up Iridium locally</p>"},{"location":"3.-Running-Locally/2.run-iridium-locally/","title":"Stand up locally","text":""},{"location":"3.-Running-Locally/2.run-iridium-locally/#youll-need-the-following-to-run-iridium-locally","title":"You'll need the following to run iridium locally:","text":"<ul> <li>Node 18</li> <li>Java 17</li> <li>Docker</li> </ul> <p>Iridium is dependent on an RDBMS system such as MySQL or MariaDB.</p> <p>Note: all commands are run from the root of the distribution folder you downloaded and extracted in the previous step, The set up in this document is not intended for production purposes.</p>"},{"location":"3.-Running-Locally/2.run-iridium-locally/#stand-up-the-database","title":"Stand up the database","text":"<p>Run an instance of MariaDB locally. </p> <pre><code>$ docker run  --name mariadb \\\n    -p 3306:3306 \\\n    -e MYSQL_ROOT_PASSWORD=iridium \\\n    -e MYSQL_DATABASE=identities \\\n    -e MYSQL_USER=iridium \\\n    -e MYSQL_PASSWORD=iridium \\\n    -d mariadb:latest\n</code></pre> <p>Now you'll be able to start and stop the MariaDB container with the following commands.</p> <pre><code>$ docker stop mariadb\n$ docker start mariadb\n</code></pre> <p>At this point you have an instance of MariaDB. You can verify this by executing <code>docker ps</code>, you should see similar output like below</p> <pre><code> docker ps\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED         STATUS         PORTS                                        NAMES\na44c37b6d4c1   mariadb:10.6.11                              \"docker-entrypoint.s\u2026\"   6 seconds ago   Up 3 seconds   0.0.0.0:3306-&gt;3306/tcp                       mariadb\n</code></pre> <p>We still need to initialize the database with specific data for Iridium to function</p>"},{"location":"3.-Running-Locally/2.run-iridium-locally/#initialize-the-iridium-database","title":"Initialize the Iridium Database","text":"<p>Iridium needs specific data entities to exist for it to function. This guide demonstrates how to use the iridium CLI to execute this task.  This document assumes you have downloaded and unpacked the binary distribution of Iridium in a previous step as detail here.</p> <p>To initialize the database execute the following command.  Again we are expecting you to be in the top level folder of expanded tar.gz distribution you downloaded and unpacked earlier.</p> <p>NOTE Iridium init is meant to be non-destructive in that if you initialize the database once it will not work again.  You will need to bring your  containers all the way down to run the <code>init</code> function again. </p> <ol> <li>Initialize with a social provider</li> </ol>"},{"location":"3.-Running-Locally/2.run-iridium-locally/#initialize-with-iridium-with-a-login-provider","title":"Initialize with Iridium with a Login Provider","text":"<p>Again we are expecting you to be in the top level folder of expanded tar.gz distribution you downloaded and unpacked earlier. For ease of getting started lets focus on using only provider at the moment. You'll need to set your GitHub Client credentials in the file below.  Instructions on how to do this with GitHub are here.  You can do this by executing. </p> <pre><code>$ vim conf/external-providers.yaml\n</code></pre> <p>Modify the contents of the file to match below, you'll need to modify the values to be specific for your GitHub Oauth application. You will want to remove the Google YAML block for this quick start. </p> <pre><code>- name: \"github\"\n  clientId: \"${yourClientId}\"\n  clientSecret: \"${yourClientSecret\"\n</code></pre>"},{"location":"3.-Running-Locally/2.run-iridium-locally/#initialize-the-database","title":"Initialize the database","text":"<p>Run the following command to initialize the database with the GitHub credentials, and other needed entities for Iridium to run.</p> <pre><code>$ ./bin/iridium init \n</code></pre> <p>Upon successful initialization of the database you'll see similar output.  </p> <pre><code>06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Database successfully initialized\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Iridium Management Application ID is localRunIdChangeForProduction\n06:22:59.885 [main] INFO  software.iridium.cli.command.InitCommand - Be sure to place this in the appropriate environment.ts file\n</code></pre> <p>Since this is a local run, you will not need to update your <code>environment.ts</code> as stated above.</p>"},{"location":"3.-Running-Locally/2.run-iridium-locally/#run-the-iridium-core-server","title":"Run the Iridium Core Server","text":"<p>Run the following command, again this is from the top level folder of the distribution you downloaded.</p> <pre><code>$ export SPRING_CONFIG_LOCATION=./conf/application.properties\n$  java -jar ./lib/iridium-core-server-${iridium-version}.jar\n</code></pre> <p>If you want to run Iridium from source, Follow the instructions to run Iridium from Intellij here.  From here, you should be able to log in to the Iridium Management UI using your GitHub account. At this point you've stood up the system with an Iridium tenant and an associated management application. </p>"},{"location":"3.-Running-Locally/3.stand-up-the-iridium-ui/","title":"Stand up the Iridium Management UI","text":""},{"location":"3.-Running-Locally/3.stand-up-the-iridium-ui/#clone-the-repo","title":"Clone the Repo","text":"<pre><code>$ git clone git@github.com:IridiumIdentity/admin-ui.git\n</code></pre>"},{"location":"3.-Running-Locally/3.stand-up-the-iridium-ui/#cd-into-the-angular-project-and-install-dependencies","title":"<code>cd</code> into the Angular project and install dependencies","text":"<pre><code>$ cd admin-ui &amp;&amp; npm install\n</code></pre>"},{"location":"3.-Running-Locally/3.stand-up-the-iridium-ui/#serve-locally","title":"Serve locally","text":"<pre><code>$ ng serve\n</code></pre> <p>The next step is log in the management UI by using a social provider (such as GitHub) to access the system by visiting http://localhost:4200 in your browser.</p> <p>From here, you can create tenants, associate social providers, single page applications or server apps in via the UI to be secured by Iridium.</p>"},{"location":"3.-Running-Locally/4.run-iridium-with-docker/","title":"Stand up locally with Docker","text":""},{"location":"3.-Running-Locally/4.run-iridium-with-docker/#youll-need-the-following-to-run-iridium-locally","title":"You'll need the following to run iridium locally:","text":"<ul> <li>Node 18</li> <li>Java 17</li> <li>Docker</li> </ul> <p>Iridium is dependent on an RDBMS system such as MySQL or MariaDB</p> <p>We will use Docker Compose to simplify the setup process.  You can go about completing this step by either checking out the repo locally or using the Docker Compose file contents below.</p>"},{"location":"3.-Running-Locally/4.run-iridium-with-docker/#serve-iridium-from-the-repo","title":"Serve Iridium from the repo","text":"<p>Clone the repo</p> <pre><code>$ git clone git@github.com:IridiumIdentity/iridium.git\n</code></pre> <p><code>cd</code> into the project</p> <pre><code>$ cd iridium\n</code></pre> <p>Before running the compose command below be sure to set the environment variable HOST_INTERNAL.  This ip address should be set to whatever your default gateway is.  This is typically the ip address of your router on a home network.  The address below is just an example.</p> <pre><code>export HOST_INTERNAL=192.168.1.x\n</code></pre> <p>Stand up mariadb, the latest version of the core iridium server</p> <pre><code>$ docker compose -f tools/schedulers/compose/local-iridium-compose.yml up -d\n</code></pre> <p>At this point you have a version of the Iridium core server and an instance of MariaDB We still need to initialize the database with specific data for Iridium to function.</p> <p>You can verify this by executing <code>docker ps</code>, you should see similar output like below</p> <pre><code> docker ps\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED         STATUS         PORTS                                        NAMES\na44c37b6d4c1   mariadb:10.6.11                              \"docker-entrypoint.s\u2026\"   6 seconds ago   Up 3 seconds   0.0.0.0:3306-&gt;3306/tcp                       mariadb\nb919d4ffcf56   iridiumidentity/iridium-core-server:latest   \"java -jar /opt/java\u2026\"   6 seconds ago   Up 4 seconds   0.0.0.0:8381-&gt;8381/tcp                       iridium\n</code></pre> <p>It may take the iridium core server about 30 seconds to fully come up.  You can verify all is good by watching the logs by executing <code>docker logs iridium -f</code>.</p> <p>When you see the following, the server is ready to go.</p> <pre><code>main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8381 (http) with context path ''\nmain] software.iridium.api.Iridium             : Started Iridium in 64.841 seconds (process running for 74.472)\n</code></pre> <p>Next, you should initialize the database</p>"},{"location":"3.-Running-Locally/4.run-iridium-with-docker/#initialize-the-iridium-database","title":"Initialize the Iridium Database","text":"<p>Iridium needs specific data entities to exist for it to function. This guide demonstrates how to use the iridium CLI to execute this task.  This document assumes you have downloaded and unpacked the binary distribution of Iridium in a previous step as detail here.</p> <p>To initialize the database execute the following command.  Again we are expecting you to be in the top level folder of expanded tar.gz distribution you downloaded and unpacked earlier.</p> <p>NOTE You can initialize Iridium with or without a social provider at start up.  Quick links are below.  Iridium init is meant to be non-destructive in that if you initialize the database once it will not work again.  You will need to bring your containers all the way down to run the <code>init</code> function again.</p> <ol> <li>Initialize without a social provider     OR</li> <li>Initialize with the GitHub social provider</li> </ol>"},{"location":"3.-Running-Locally/4.run-iridium-with-docker/#initialize-with-iridium-with-the-github-login-provider","title":"Initialize with Iridium with the GitHub Login Provider","text":"<p>If you want to allow users to log in to the Iridium Management app with their GitHub account you can allow this here following the directions below:</p> <p>Again we are expecting you to be in the top level folder of expanded tar.gz distribution you downloaded and unpacked earlier. In this example, we are passing the flag to allow users to register with the Iridium tenant using GitHub by passing the flag <code>--allow-github=true</code>.</p> <pre><code>$ ./bin/iridium init \\\n--host=localhost \\\n--port=3306 \\\n--user=root \\\n--password \\\n--allow-github=true\n</code></pre> <p>The CLI tool should prompt your for the database password.  Enter the password you configured upon standing up the database.</p> <pre><code>$ Enter value for --password (the database password): \n</code></pre> <p>Next the CLI will prompt for a GitHub Oauth application credentials.  If you don't have a GitHub application ready to use, you can follow the directions here to create one</p> <p>Enter your GitHub OAuth application id</p> <pre><code>$ Enter value for github client id: my-client-id\n</code></pre> <p>Enter your GitHub OAuth application secret</p> <pre><code>$ Enter value for github client secret: my-client-secret\n</code></pre> <p>From here, you should be able to log in to the Iridium Management UI using your GitHub account. At this point you've stood up the system with an Iridium tenant for and application for managing Iridium. At this point you can start to create your own tenant and applications in Iridium to be secured.</p> <p>Next the CLI will prompt for a GitHub Oauth application credentials.  If you don't have a GitHub application ready to use, you can follow the directions here to create one</p> <p>Enter your GitHub OAuth application id</p> <pre><code>$ Enter value for github client id: my-client-id\n</code></pre> <p>Enter your GitHub OAuth application secret</p> <pre><code>$ Enter value for github client secret: my-client-secret\n</code></pre> <p>Upon successful initialization of the database you'll see similar output</p> <pre><code>06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Database successfully initialized\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Iridium Management Application ID is ${someApplicationId}\n06:22:59.885 [main] INFO  software.iridium.cli.command.InitCommand - Be sure to place this in the appropriate environment.ts file\n</code></pre> <p>From here you need to take your generated id <code>${someApplicationId}</code> and stand up the Iridium Management UI.</p>"},{"location":"3.-Running-Locally/4.run-iridium-with-docker/#stand-up-the-iridium-management-ui","title":"Stand up the Iridium Management UI","text":"<p>The rest of this document assumes you have cloned the iridium repository, and you are in the root directory of project.</p> <p>Update your environment.ts file with correct application ID.  From the top level directory it's located at:</p> <pre><code>iridium-angular-client/projects/iridium-ui/src/environments/environment.ts\n</code></pre> <p>The file should look like this before you add your client id</p> <pre><code>export const environment = {\n  production: false,\n  iridium: {\n    domain: 'http://localhost:8381/',\n    redirectUri: 'http://localhost:4200/callback',\n    clientId: 'YOUR_CLIENT_ID',\n    errorPath: '/error'\n  }\n};\n</code></pre> <p>After the change it will look like this.  Keep in mind to swap out your real application id for <code>${someApplicationId}</code></p> <pre><code>export const environment = {\n  production: false,\n  iridium: {\n    domain: 'http://localhost:8381/',\n    redirectUri: 'http://localhost:4200/callback',\n    clientId: '${someApplicationId}',\n    errorPath: '/error'\n  }\n};\n</code></pre> <p><code>cd</code> into the Angular project</p> <pre><code>$ cd iridium-angular-client/\n</code></pre> <p>build the <code>ngx-iridium-client</code> and the management UI.</p> <pre><code>$ ng build ngx-iridium-client &amp;&amp; ng serve\n</code></pre> <p>At this point you are ready to use Iridium to secure your system. You've stood up the  Iridium Core Server, and the management UI.</p> <p>The next step is log in the management UI using either the local user you created (username/password) or the by using a social provider (such as GitHub) to access the system by visiting http://localhost:4200 in your browser.</p> <p>From here, you can create tenants and associate single page applications or server apps in the UI to be secured by Iridium.</p>"},{"location":"3.-Running-Locally/building-from-source/","title":"Building from source","text":""},{"location":"3.-Running-Locally/building-from-source/#prerequisites","title":"Prerequisites","text":"<p>You will need.  -  Node 18  -  Java 17  -  Maven 3.8.4 or greater  </p>"},{"location":"3.-Running-Locally/building-from-source/#compiling-from-source","title":"Compiling from source","text":"<p>Iridium is with Maven.  From the top level directory you can execute a <code>mvn clean package</code> to build all the submodules. You should see the following if you are successful.</p> <pre><code>[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for iridium {iridium-version}:\n[INFO] \n[INFO] iridium ............................................ SUCCESS [  0.979 s]\n[INFO] iridium-java-client ................................ SUCCESS [  7.152 s]\n[INFO] iridium-core-entity ................................ SUCCESS [  2.365 s]\n[INFO] iridium-server-base ................................ SUCCESS [  5.724 s]\n[INFO] iridium-core-server ................................ SUCCESS [ 15.957 s]\n[INFO] iridium-cli ........................................ SUCCESS [ 11.330 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  44.164 s\n[INFO] Finished at: 2023-06-24T20:08:32-05:00\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>After compiling, the distribution that contains the code needed to run iridium can be found at</p> <pre><code>{ProjectRoot}/iridium-cli/target/iridium-{iridium-version}-bin.tar.gz\n</code></pre> <p>Currently, the management UI is managed by separate build process.  In future revisions will work to consolidate the  separate build processes into easier to manage commands.  You can build the management UI by following the commands below. All commands are assuming you are starting at the top level directory of the Iridium project.</p> <pre><code>$ cd iridium-angular-client\n$ npm install\n$ ng build ngx-iridium-client\n$ ng serve\n</code></pre>"},{"location":"3.-Running-Locally/developing-with-intellij/","title":"Developing with intellij","text":""},{"location":"3.-Running-Locally/developing-with-intellij/#setting-up-with-intellij","title":"Setting up with Intellij","text":""},{"location":"3.-Running-Locally/developing-with-intellij/#use-launcher-script","title":"Use launcher script","text":""},{"location":"3.-Running-Locally/developing-with-intellij/#current-supported-operating-systems","title":"Current supported operating systems","text":"<ul> <li>darwin (OSX) From the root folder of the repo you can execute the following command to open the project in Intellij.</li> </ul> <pre><code>$ ./tools/scripts/setup-intellij.sh\n</code></pre>"},{"location":"3.-Running-Locally/developing-with-intellij/#use-intellij-gui","title":"Use Intellij GUI","text":"<p>Opening Iridium with Intellij is straight-forward.  In the menu bar in Intellij go to <code>File -&gt; Open...</code> then select the top level folder of the iridium project on your computer.</p> <p></p> <p>The project should load as it's a standard Maven project. </p>"},{"location":"3.-Running-Locally/setting-properties/","title":"Configuration","text":"<p>Iridium's core server needs a set of required properties to be set. </p> <p>An example for local configuration is located here</p>"},{"location":"3.-Running-Locally/using-docker-for-development/","title":"Using Docker for development","text":"<p>Run the following command to set up MariaDB on your local machine.</p> <pre><code>$ docker compose -f tools/schedulers/compose/local-dev-compose.yml up [-d]\n</code></pre> <p>Now you'll be able to start and stop the MariaDb container with the following commands.</p> <pre><code>$ docker stop iridium-db\n$ docker start iridium-db\n</code></pre>"},{"location":"4.-Extending-Iridium/5.building-libraries/","title":"Authorization Code Flow","text":"<p>Building Authorization Code Flow libraries for use with Iridium requires a few steps.</p> <ul> <li>Understanding the Authorization Code Flow Grant Type</li> <li>The endpoints used in the Authorization Flow</li> </ul>"},{"location":"4.-Extending-Iridium/5.building-libraries/#understanding-the-authorization-code-flow","title":"Understanding the Authorization Code Flow","text":"<p>The authorization code flow is used to get access tokens and refresh tokens.  This flow is based on redirection.</p> <p></p> <ol> <li>The resource owner (end-user) visits a third-party client (web application)</li> <li>The resource owner selects the \u201csign up with Google\u201d button in the client. The user-agent (browser) directs the resource owner to the Google sign-in page.</li> <li>The resource owner (end-user) authenticates and authorizes the authorization server to grant access to the resource owner's information (in this case it could be the email address and profile information) to the third-party client.</li> <li>After the resource owner (end-user) authorizes access, the authorization server redirects the user-agent (browser) back to the original third-party client with an authorization code and typically a state parameter</li> <li>The third-party client requests an access token with the received authorization code and associated redirect URI</li> <li>The authorization authenticates the client, validates the authorization code and the accompanying redirect URI matches the URI provided in step D.  If the request is valid the authorization server returns back with an access token and an optional refresh token.</li> </ol>"},{"location":"4.-Extending-Iridium/5.building-libraries/#endpoints-used-in-the-authorization-code-flow","title":"Endpoints used in the Authorization Code Flow","text":"<p>When building clients for Iridium, there are three main RESTful endpoints you need to be familiar with.</p> <ol> <li>The authorization endpoint</li> <li>The token endpoint</li> <li>The refresh token endpoint</li> </ol>"},{"location":"4.-Extending-Iridium/5.building-libraries/#the-external-provider-authorization-endpoint","title":"The external provider authorization endpoint","text":"<ul> <li>Method: <code>POST</code></li> <li> <p>Endpoint: <code>${serverRoot}/oauth/external/authorize</code></p> </li> <li> Query Parameter Type Description response_type string Required The value must be <code>code</code> state string Required This is an opaque value to maintain state between the initial authorization request and the callback. scope string Required Depending on the provider you are authorizing with will determine the value here.  As an example, if you are using GitHub a safe default is <code>user:email</code> client_id string Required The client identifier. This is an opaque and unique string generated for the client after registration of it within Iridium. provider string Required This must be either <code>github</code> or <code>google</code>.  This parameter is subject to change in upcoming releases. code_challenge_method string Required This must be <code>S256</code> code_challenge string Required The code challenge is derived from the <code>code_verifier</code> (listed below).<code>code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))</code> </li> <li> <p>Response:</p> <ul> <li>If the request is valid the (end-user) will be redirected to the external identity provider for authorization by the Iridium server.</li> </ul> </li> </ul>"},{"location":"4.-Extending-Iridium/5.building-libraries/#creating-the-code-verifier","title":"Creating the code verifier","text":"<p>This is a high-entropy cryptographic random string using the unreserved characters [A-Z], [a-z], [0-9], \"-\", \".\", \"_\", \"~\".  It is <code>recommended</code> that the output of a suitable random number generator be used to create a 32-octet sequence.  The octet sequence is then base64url-encoded to produce a 43-octet URL safe string to use as the code verifier.</p>"},{"location":"4.-Extending-Iridium/5.building-libraries/#the-token-endpoint","title":"The token endpoint","text":"<ul> <li>Method: <code>POST</code></li> <li>Endpoint: <code>${serverRoot}/oauth/token</code></li> </ul> Query Parameter Type Description grant_type string Required This value must be set to <code>authorization_code</code> code string Required This is the authorization code recieved from the Iridium server redirect_uri string This must match exactly the URI at the above request client_id string Required Unless authentication is supplied via HTTP Basic Auth header using the client ID as the username and secret as the password, or by accepting the strings in the post body as <code>client_id</code> and <code>client_secret</code> code_verfier string Required The <code>code_verifier</code> provided at the above request * Response: * If the request is successful the response will look similar to the following: <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\n\n{\n  \"access_token\":\"someAccessTokenValue\",\n  \"token_type\":\"Bearer\",\n  \"expires_in\":3600,\n  \"refresh_token\":\"SomeRefreshTokenValue\",\n}\n</code></pre>"},{"location":"4.-Extending-Iridium/5.building-libraries/#the-refresh-token-endpoint","title":"The refresh token endpoint","text":"<ul> <li>Method: <code>POST</code></li> <li>Endpoint: <code>${serverRoot}/oauth/token/refresh</code></li> </ul> Query Parameter Type Description grant_type string Required This value must be set to <code>refresh_token</code> refresh_token string Required The refresh token client_id string Required The client identifier. This is an opaque and unique string generated for the client after registration of it within Iridium. * Response: * If the request is successful the response will look similar to the following: <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\n\n{\n  \"access_token\":\"someAccessTokenValue\",\n  \"token_type\":\"Bearer\",\n  \"expires_in\":3600,\n  \"refresh_token\":\"SomeRefreshTokenValue\",\n}\n</code></pre>"},{"location":"5.-External-Identity-Providers/create-github-application/","title":"Create a GitHub Application","text":"<p>Note  If you are standing up the Iridium UI you can use the values specified in the Form Values section of this page.  </p> <p>If you are using your own app, you will need to substitute the specific <code>Homepage URL</code> and <code>Authorization callback URL</code> for you app.</p> <p>You can create one by filling out the form here.</p> <p></p>"},{"location":"5.-External-Identity-Providers/create-github-application/#form-values","title":"Form Values","text":"<p>For the form values enter the following:</p> <ul> <li><code>ApplicationName</code>: Any name you wish.  In this example we use \"MyIridiumInstance\"</li> <li><code>Homepage URL</code>: http://localhost:4200.</li> <li><code>Authorization callback URL</code>: http://localhost:4200/callback</li> </ul>"},{"location":"5.-External-Identity-Providers/create-github-application/#get-your-client-id","title":"Get your Client ID","text":"<p>After the application is created you'll need to create a secret for it. 1. Make sure to capture your \"Client ID\" value. You'll need while initializing  Iridium 2. Generate a secret for your GitHub application by clicking on the  \"Generate new client secret\" button.  </p>"},{"location":"5.-External-Identity-Providers/create-github-application/#capture-the-github-secret","title":"Capture the GitHub Secret","text":"<ol> <li>After a secret is created you'll need to capture that value to use with the CLI tool.</li> </ol>"},{"location":"6.-Download/artifacts/","title":"Iridium Downloads","text":""},{"location":"6.-Download/artifacts/#current-version-021","title":"Current Version 0.2.1","text":"Release Link Crypto Files Binary iridium-0.2.1-bin.tar.gz asc, sha512 Source iridium-0.2.1-src.tar.gz asc, sha512"},{"location":"6.-Download/artifacts/#docker-container","title":"Docker Container","text":"Release Link Pull Command Debian iridium-0.2.1-docker docker pull iridiumidentity/iridium-core-server:0.2.1"},{"location":"6.-Download/artifacts/#iridium-examples","title":"Iridium Examples","text":"Location Type Link GitHub Admin UI https://github.com/IridiumIdentity/admin-ui Github Angular Quickstart https://github.com/IridiumIdentity/iridium-angular-example"}]}