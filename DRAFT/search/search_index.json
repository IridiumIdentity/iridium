{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Customer Identity and Access Management","text":""},{"location":"1.-overview/overview/","title":"Overview","text":""},{"location":"1.-overview/overview/#what-is-iridium","title":"What is iridium?","text":"<p>Iridium is an OAuth2.x-compliant identity management system.</p>"},{"location":"1.-overview/overview/#what-problem-does-it-solve","title":"What problem does it solve?","text":"<p>The OAuth2.x RFC is full of great details, but it mainly focuses on defining the interfaces on how different identity systems can work together.  There are many implementation details in the spec which are not defined on purpose, which requires developers to make the best guess at how security, authentication, authorization, etc should be implemented within their own system.  The goal of the OAuth framework isn\u2019t meant to restrict how implementation should be done, but to allow neighboring systems to be able to exchange data with one another securely.</p> <p>Iridium helps developers secure their applications or systems the right way by providing an opinionated implementation on how to solve identity management for systems of any size.</p>"},{"location":"1.-overview/overview/#what-do-you-mean-there-are-many-implementation-details-not-defined","title":"What do you mean there are many implementation details not defined?","text":"<p>Study the diagram below that describes how the authorization code grant works, but before you do let\u2019s briefly call out what some of these terms mean.  </p> <ul> <li>Resource owner: The entity that can grant access to a protected resource.  An example is the end-user of an application.  </li> <li>User-agent: any software that helps retrieve, present, and interact with web content.  An example is a web browser  </li> <li>Client: A client is a third-party application that requests access to resources of the resource owner. An example is an Angular or React application.  </li> <li>Authorization server: validates the credentials and redirects the resource owner back to the client with an authorization code. </li> </ul> <ol> <li>The resource owner (end-user) visits a third-party client (web application)  </li> <li>The resource owner selects the \u201csign up with Google\u201d button in the client. The user-agent (browser) directs the resource owner to the Google sign-in page.  </li> <li>The resource owner (end-user) authenticates and authorizes the authorization server to grant access to the resource owner's information (in this case it could be the email address and profile information) to the third-party client.  </li> <li>After the resource owner (end-user) authorizes access, the authorization server redirects the user-agent (browser) back to the original third-party client with an authorization code and typically a state parameter  </li> <li>The third-party client requests an access token with the received authorization code and associated redirect URI  </li> <li>The authorization authenticates the client, validates the authorization code and the accompanying redirect URI matches the URI provided in step D.  If the request is valid the authorization server returns back with an access token and an optional refresh token.  </li> </ol> <p>The OAuth 2.x spec does a great job of giving an overview of how a system is expected to behave under certain circumstances, but it doesn\u2019t tell you how to make the system make decisions behind the scenes to create the expected outcomes.  With iridium, we put the power in your hands to take control of your system.  </p>"},{"location":"1.-overview/overview/#how-is-the-system-architected","title":"How is the system architected?","text":"<p>Iridium has been built with simplicity in the front of our minds as we build as flexible a model as we can. Iridium is served from a single jar tied to a relational database.  The system expects specific seed data to exist in the database to allow for the system to successfully authenticate, authorize, and provision access tokens to your users.</p> <p></p>"},{"location":"1.-overview/overview/#tell-me-more-about-the-database-entities","title":"Tell me more about the database entities","text":"<p>As Iridium is a configurable system, there are many details to go through.  At a high level, the important database relationships  are below as follows:</p> <p></p>"},{"location":"2.-getting-started/1.Install-the-CLI/","title":"Install the CLI","text":""},{"location":"2.-getting-started/1.Install-the-CLI/#youll-need-the-following-to-run-iridium-locally","title":"You'll need the following to run iridium locally:","text":"<ul> <li>Node 18</li> <li>Java 17</li> <li>Docker</li> </ul>"},{"location":"2.-getting-started/1.Install-the-CLI/#download-the-release-package","title":"Download the release package:","text":"<pre><code>$ wget https://github.com/IridiumIdentity/iridium/releases/download/v0.1.3/iridium-0.1.3-bin.tar.gz\n</code></pre>"},{"location":"2.-getting-started/1.Install-the-CLI/#unzip-the-package","title":"Unzip the package","text":"<pre><code>$ tar -xzf iridium-0.1.3-bin.tar.gz\n</code></pre> <p>For the rest of this setup all commands are run from the root of the distribution folder, so switch to it:</p> <pre><code>$ cd iridium-0.1.3-bin\n</code></pre>"},{"location":"2.-getting-started/1.Install-the-CLI/#verify-installation","title":"Verify Installation","text":"<p>You can check that you successfully installed iridium by executing the cli tool</p> <pre><code>$ bin/iridium --help\n</code></pre> <p>Your output should be similar to the following</p> <pre><code>bin/iridium --help\nUsage: iridium [-hV] [COMMAND]\niridium management cli\n  -h, --help      Show this help message and exit.\n  -V, --version   Print version information and exit.\nCommands:\n  init  inits the system\n  run   run iridium\n</code></pre> <p>Now you can stand up Iridium locally</p>"},{"location":"2.-getting-started/2.stand-up-local/","title":"Stand up a locally","text":""},{"location":"2.-getting-started/2.stand-up-local/#prerequisites","title":"Prerequisites","text":"<p>You will need.</p> <ul> <li>Node 18</li> <li>Docker</li> </ul> <p>Iridium is dependent on an RDBMS system such as MySQL or MariaDB and a SMTP server.</p> <p>We will use Docker Compose to simplify the setup process.  You can go about completing this step by either checking out the repo locally or using the Docker Compose file contents below.</p>"},{"location":"2.-getting-started/2.stand-up-local/#serve-iridium-from-the-repo","title":"Serve Iridium from the repo","text":"<p>Clone the repo</p> <pre><code>$ git clone git@github.com:IridiumIdentity/iridium.git\n</code></pre> <p><code>cd</code> into the project</p> <pre><code>$ cd iridium\n</code></pre> <p>Stand up mariadb, the latest version of the core iridium server, and the fake smtp server</p> <pre><code>$ docker compose -f tools/schedulers/compose/local-iridium-compose.yml up -d\n</code></pre> <p>At this point you have a version of the Iridium core server, an instance of MariaDB, and an instance of Fake SMTP Server We still need to initialize the database with specific data for Iridium to function.  </p> <p>You can verify this by executing <code>docker ps</code>, you should see similar output like below</p> <pre><code> docker ps\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED         STATUS         PORTS                                        NAMES\na44c37b6d4c1   mariadb:10.6.11                              \"docker-entrypoint.s\u2026\"   6 seconds ago   Up 3 seconds   0.0.0.0:3306-&gt;3306/tcp                       mariadb\n9b9005ad9662   gessnerfl/fake-smtp-server                   \"java -Djava.securit\u2026\"   6 seconds ago   Up 4 seconds   8025/tcp, 8081/tcp, 0.0.0.0:8080-&gt;8080/tcp   fake-smtp-server\nb919d4ffcf56   iridiumidentity/iridium-core-server:latest   \"java -jar /opt/java\u2026\"   6 seconds ago   Up 4 seconds   0.0.0.0:8381-&gt;8381/tcp                       iridium\n</code></pre> <p>It may take the iridium core server about 30 seconds to fully come up.  You can verify all is good by watching the logs by  executing <code>docker logs iridium -f</code>.  </p> <p>When you see the following, the server is ready to go.</p> <pre><code>main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8381 (http) with context path ''\nmain] software.iridium.api.Iridium             : Started Iridium in 64.841 seconds (process running for 74.472)\n</code></pre> <p>Next, you should initialize the database</p>"},{"location":"2.-getting-started/2.stand-up-local/#serve-iridium-using-the-docker-compose-file-contents-below","title":"Serve Iridium using the Docker Compose file contents below","text":"<p>Place the below yaml in file to stand up Iridium locally. </p> <pre><code>version: '3.8'\n\nservices:\n\n  iridium:\n    image: iridiumidentity/iridium-core-server:latest\n    container_name: iridium\n    restart: always\n    pull_policy: always\n    ports:\n      - \"8381:8381\"\n    environment:\n      - SERVER_PORT=8381\n      - LOGGING_LEVEL_ROOT=info\n      - LOGGING_LEVEL_SOFTWARE_IRIDIUM=DEBUG\n      - SPRING_JMX_ENABLED=false\n      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG\n      - RUN_PROFILE=local\n      - SPRING_MVC_LOG-REQUEST-DETAILS=true\n      - SPRING_MVC_DISPATCH-OPTIONS-REQUEST=true\n      - SPRING_JPA_HIBERNATE_SHOW_SQL=false\n      - SPRING_JPA_HIBERNATE_FORMAT_SQL=true\n      - SPRING_JPA_PROPERTIES_HIBERNATE_HBM2DDL_DELIMITER=;\n      - SPRING_JPA_PROPERTIES_HIBERNATE_GLOBALLY_QUOTED_IDENTIFIERS=true\n      - SPRING_JPA_PROPERTIES_HIBERNATE-GLOBALLY_QUOTED_IDENTIFIERS_SKIP_COLUMN_DEFINITIONS=true\n      - SPRING_DATASOURCE_DRIVER-CLASS=com.mysql.jdbc.Driver\n      - SPRING_DATASOURCE_URL=jdbc:mysql://mariadb/identities?useSSL=false\n      - SPRING_DATASOURCE_USERNAME=iridium\n      - SPRING_DATASOURCE_PASSWORD=iridium\n      - SPRING_DATASOURCE_TOMCAT_MAX-ACTIVE=5\n      - SPRING_DATASOURCE_TEST-WHILE-IDLE=true\n      - SPRING_DATASOURCE_VALIDATION_QUERY=SELECT 1 FROM DUEL\n      - SPRING_DATASOURCE_VALIDATION_INTERVAL=180000\n      - PASSWORD_RESET_TOKEN_LIFETIME_HOURS=4\n      - SOFTWARE.IRIDIUM.PASSWORDRESET.CLIENT.BASEURL=http://localhost:8381/\n      - SOFTWARE.IRIDIUM.EMAILNOTIFICATION.CLIENT.BASEURL=http://localhost:8381/\n      - SOFTWARE.IRIDIUM.API.TTL.MINUTES=30\n      - SERVER_ERROR_WHITELABEL_ENABLED=false\n      - SPRING_MAIL_FROM_ADDRESS=noreply@yourdomain.com\n      - SPRING_THYMELEAF_PREFIX=classpath:/templates/\n      - SPRING_THYMELEAF_SUFFIX=.html\n      - SPRING_MAIL_HOST=fake-smtp\n      - SPRING_MAIL_USERNAME=mailUsername\n      - SPRING_MAIL_PASSWORD=mailPassword\n      - SPRING_MAIL_PROPERTIES_MAIL_TRANSPORT_PROTOCOL=smtp\n      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_PORT=8025\n      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true\n      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true\n      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED=false\n    networks:\n      - iridium\n\n  mariadb:\n    image: mariadb:10.6.11\n    container_name: mariadb\n    restart: always\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: iridium\n      MYSQL_DATABASE: identities\n      MYSQL_USER: iridium\n      MYSQL_PASSWORD: sug4rn3ss&amp;\n    networks:\n      - iridium\n\n  fake-smtp:\n    image: gessnerfl/fake-smtp-server\n    container_name: fake-smtp-server\n    ports:\n      - \"8080:8080\"\n    networks:\n      - iridium\n\nnetworks:\n  iridium:\n    driver: bridge\n\n</code></pre> <p>You can use Docker Compose to create the system locally by executing the below:</p> <pre><code>$ docker compose -f path/to/your/compose/file.yml up -d\n</code></pre>"},{"location":"2.-getting-started/2.stand-up-local/#initialize-the-iridium-database","title":"Initialize the Iridium Database","text":"<p>Iridium needs specific data entities to exist for it to function. This guide demonstrates how to use the iridium CLI to execute this task.  This document assumes you have downloaded and unpacked the binary distribution of Iridium in a previous step as detail here.</p> <p>To initialize the database execute the following command.  Again we are expecting you to be in the top level folder of expanded tar.gz distribution you downloaded and unpacked earlier.</p>"},{"location":"2.-getting-started/2.stand-up-local/#initialize-with-iridium-without-a-social-provider","title":"Initialize with Iridium without a social provider","text":""},{"location":"2.-getting-started/2.stand-up-local/#warning","title":"!!!!!!!! WARNING !!!!!!!!","text":"<p>We will be deprecating the use of passwords within Iridium entirely in future releases.  Some password functionality  may not work as intended (password resets, etc) as we are in progress of deprecating their usage.  To get around this you can  only allow users to use social providers to access your applications. </p> <p>This will initialize the system to only accept a username (email) and password as user credentials.</p> <pre><code>$ ./bin/iridium  init \\\n--host=localhost \\\n--port=3306 \\\n--user=root \\\n--password \\\n--admin-password \\\n--admin-email=you@somewhere.com\n</code></pre> <p>The CLI tool should prompt your for the database password.  Enter the password you configured upon standing up the database.  If you used the Docker Compose to stand up the Iridium the password in this case will be <code>iridium</code> .</p> <pre><code>$ Enter value for --password (the database password): \n</code></pre> <p>Next, it will ask for your admin user password.  You may choose any value you like. This is the password you will use along with the <code>--admin-email</code> argument you passed to the Iridium CLI to init the system.  You will use these credentials to sign into the Iridium management UI.</p> <pre><code>$ Enter value for --admin-password (the admin password):\n</code></pre> <p>Upon successful initialization of the database you'll see similar output</p> <pre><code>06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Database successfully initialized\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Iridium Management Application ID is ${someApplicationId}\n06:22:59.885 [main] INFO  software.iridium.cli.command.InitCommand - Be sure to place this in the appropriate environment.ts file\n</code></pre> <p>From here you need to take your generated id <code>${someApplicationId}</code> and stand up the Iridium Management UI.</p>"},{"location":"2.-getting-started/2.stand-up-local/#initialize-with-iridium-with-the-github-login-provider","title":"Initialize with Iridium with the GitHub Login Provider","text":"<p>If you want to allow users to log in to the Iridium Management app with their GitHub account you can allow this here following the directions below:</p> <p>Again we are expecting you to be in the top level folder of expanded tar.gz distribution you downloaded and unpacked earlier. In this example, we are passing the flag to allow users to register with the Iridium tenant using GitHub by passing the flag <code>--allow-github=true</code>.</p> <pre><code>$ ./bin/iridium init \\\n--host=localhost \\\n--port=3306 \\\n--user=root \\\n--password \\\n--allow-github=true\n</code></pre> <p>The CLI tool should prompt your for the database password.  Enter the password you configured upon standing up the database.</p> <pre><code>$ Enter value for --password (the database password): \n</code></pre> <p>Next the CLI will prompt for a GitHub Oauth application credentials.  If you don't have a GitHub application ready to use, you can follow the directions here to create one</p> <p>Enter your GitHub OAuth application id</p> <pre><code>$ Enter value for github client id: my-client-id\n</code></pre> <p>Enter your GitHub OAuth application secret</p> <pre><code>$ Enter value for github client secret: my-client-secret\n</code></pre> <p>From here, you should be able to log in to the Iridium Management UI using your GitHub account. At this point you've stood up the system with an Iridium tenant for and application for managing Iridium. At this point you can start to create your own tenant and applications in Iridium to be secured.</p> <p>Next the CLI will prompt for a GitHub Oauth application credentials.  If you don't have a GitHub application ready to use, you can follow the directions here to create one</p> <p>Enter your GitHub OAuth application id</p> <pre><code>$ Enter value for github client id: my-client-id\n</code></pre> <p>Enter your GitHub OAuth application secret</p> <pre><code>$ Enter value for github client secret: my-client-secret\n</code></pre> <p>Upon successful initialization of the database you'll see similar output</p> <pre><code>06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Database successfully initialized\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Iridium Management Application ID is ${someApplicationId}\n06:22:59.885 [main] INFO  software.iridium.cli.command.InitCommand - Be sure to place this in the appropriate environment.ts file\n</code></pre> <p>From here you need to take your generated id <code>${someApplicationId}</code> and stand up the Iridium Management UI.</p>"},{"location":"2.-getting-started/2.stand-up-local/#stand-up-the-iridium-management-ui","title":"Stand up the Iridium Management UI","text":"<p>The rest of this document assumes you have cloned the iridium repository, and you are in the root directory of project. </p> <p>Update your environment.ts file with correct application ID.  From the top level directory it's located at:</p> <pre><code>iridium-angular-client/projects/iridium-ui/src/environments/environment.ts\n</code></pre> <p>The file should look like this before you add your client id</p> <pre><code>export const environment = {\n  production: false,\n  iridium: {\n    domain: 'http://localhost:8381/',\n    redirectUri: 'http://localhost:4200/callback',\n    clientId: 'YOUR_CLIENT_ID',\n    errorPath: '/error'\n  }\n};\n</code></pre> <p>After the change it will look like this.  Keep in mind to swap out your real application id for <code>${someApplicationId}</code></p> <pre><code>export const environment = {\n  production: false,\n  iridium: {\n    domain: 'http://localhost:8381/',\n    redirectUri: 'http://localhost:4200/callback',\n    clientId: '${someApplicationId}',\n    errorPath: '/error'\n  }\n};\n</code></pre> <p><code>cd</code> into the Angular project</p> <pre><code>$ cd iridium-angular-client/\n</code></pre> <p>build the <code>ngx-iridium-client</code> and the management UI.</p> <pre><code>$ ng build ngx-iridium-client &amp;&amp; ng serve\n</code></pre> <p>At this point you are ready to use Iridium to secure your system. You've stood up the  Iridium Core Server, A Fake SMTP Server, and the management UI.  </p> <p>The next step is log in the management UI using either the local user you created (username/password) or the by using  a social provider (such as GitHub) to access the system by visiting http://localhost:4200 in your browser.</p> <p>From here, you can create tenants and associate single page applications or server apps in the UI to be secured by Iridium.</p>"},{"location":"3.-for-developers/building-from-source/","title":"Building Iridium from source","text":""},{"location":"3.-for-developers/building-from-source/#prerequisites","title":"Prerequisites","text":"<p>You will need.  -  Node 18  -  Java 17  -  Maven 3.8.4 or greater  </p>"},{"location":"3.-for-developers/building-from-source/#compiling-from-source","title":"Compiling from source","text":"<p>Iridium is with Maven.  From the top level directory you can execute a <code>mvn clean package</code> to build all the submodules. You should see the following if you are successful.</p> <pre><code>[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for iridium 0.1.0-beta:\n[INFO] \n[INFO] iridium ............................................ SUCCESS [  0.941 s]\n[INFO] iridium-java-client ................................ SUCCESS [  6.240 s]\n[INFO] iridium-core-entity ................................ SUCCESS [  2.420 s]\n[INFO] iridium-server-base ................................ SUCCESS [  1.002 s]\n[INFO] iridium-core-server ................................ SUCCESS [ 20.816 s]\n[INFO] iridium-cli ........................................ SUCCESS [  8.923 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  40.978 s\n[INFO] Finished at: 2023-05-29T09:55:51-05:00\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>After compiling, the distribution that contains the code needed to run iridium can be found at</p> <pre><code>{ProjectRoot}/iridium-cli/target/iridium-{iridium-version}-bin.tar.gz\n</code></pre> <p>Currently, the management UI is managed by separate build process.  In future revisions will work to consolidate the  separate build processes into easier to manage commands.  You can build the management UI by following the commands below. All commands are assuming you are starting at the top level directory of the Iridium project.</p> <pre><code>$ cd iridium-angular-client\n$ npm install\n$ ng build ngx-iridium-client\n$ ng serve\n</code></pre>"},{"location":"3.-for-developers/setting-properties/","title":"Configuration","text":"<p>Iridium's core server needs a set of required properties to be set. </p> <p>An example for local configuration is below.  You can see how this is used in docker-compose file. </p> <pre><code>      - SERVER_PORT=8381\n      - LOGGING_LEVEL_ROOT=info\n      - LOGGING_LEVEL_SOFTWARE_IRIDIUM=DEBUG\n      - SPRING_JMX_ENABLED=false\n      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG\n      - SPRING_MVC_LOG-REQUEST-DETAILS=true\n      - SPRING_MVC_DISPATCH-OPTIONS-REQUEST=true\n      - SPRING_JPA_HIBERNATE_SHOW_SQL=false\n      - SPRING_JPA_HIBERNATE_FORMAT_SQL=true\n      - SPRING_JPA_PROPERTIES_HIBERNATE_HBM2DDL_DELIMITER=;\n      - SPRING_JPA_PROPERTIES_HIBERNATE_GLOBALLY_QUOTED_IDENTIFIERS=true\n      - SPRING_JPA_PROPERTIES_HIBERNATE-GLOBALLY_QUOTED_IDENTIFIERS_SKIP_COLUMN_DEFINITIONS=true\n#      - SPRING_JPA_PROPERTIES_JAKARTA_PERSISTENCE.SCHEMA-GENERATION_CREATE-SOURCE=metadata &lt;- this property is optional\n#      - SPRING_JPA_PROPERTIES_JAKARTA_PERSISTENCE.SCHEMA-GENERATION_SCRIPTS_ACTION=create &lt;- this property is optional\n#      - SPRING_JPA_PROPERTIES_JAKARTA_PERSISTENCE.SCHEMA-GENERATION_SCRIPTS_CREATE-TARGET=create.sql &lt;- this property is optional\n#      - SPRING_JPA_PROPERTIES_JAKARTA_PERSISTENCE.SCHEMA-GENERATION_SCRIPTS_DROP-TARGET=drop.sql &lt;- this property is optional\n#      - SPRING_JPA_PROPERTIES_JAKARTA_PERSISTENCE.SCHEMA-GENERATION_DATABASE_ACTION=drop-and-create &lt;- this property is optional\n      - SPRING_DATASOURCE_DRIVER-CLASS=com.mysql.jdbc.Driver\n      - SPRING_DATASOURCE_URL=jdbc:mysql://mariadb/identities?useSSL=false\n      - SPRING_DATASOURCE_USERNAME=iridium\n      - SPRING_DATASOURCE_PASSWORD=sug4rn3ss&amp;\n      - SPRING_DATASOURCE_TOMCAT_MAX-ACTIVE=5\n      - SPRING_DATASOURCE_TEST-WHILE-IDLE=true\n      - SPRING_DATASOURCE_VALIDATION_QUERY=SELECT 1 FROM DUEL\n      - SPRING_DATASOURCE_VALIDATION_INTERVAL=180000\n      - PASSWORD_RESET_TOKEN_LIFETIME_HOURS=4\n      - SOFTWARE.IRIDIUM.PASSWORDRESET.CLIENT.BASEURL=http://localhost:8381/\n      - SOFTWARE.IRIDIUM.EMAILNOTIFICATION.CLIENT.BASEURL=http://localhost:8381/\n      - SOFTWARE.IRIDIUM.API.TTL.MINUTES=30\n      - SERVER_ERROR_WHITELABEL_ENABLED=false\n      - SPRING_MAIL_FROM_ADDRESS=noreply@yourdomain.com\n      - SPRING_THYMELEAF_PREFIX=classpath:/templates/\n      - SPRING_THYMELEAF_SUFFIX=.html\n      - SPRING_MAIL_HOST=someMailHost\n      - SPRING_MAIL_USERNAME=mailUsername\n      - SPRING_MAIL_PASSWORD=mailPassword\n      - SPRING_MAIL_PROPERTIES_MAIL_TRANSPORT_PROTOCOL=smtp\n      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_PORT=465\n      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true\n      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true\n      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED=true\n</code></pre>"},{"location":"3.-for-developers/using-docker-for-development/","title":"Using Docker for development","text":"<p>If you don't want to use compose you can read the following.</p> <p>Run the following command to set up MariaDB on your local machine.</p> <pre><code>$ docker run  --name iridium-db \\\n    -p 3306:3306 \\\n    -e MYSQL_ROOT_PASSWORD=iridium \\\n    -e MYSQL_DATABASE=identities \\\n    -e MYSQL_USER=identity-api \\\n    -e MYSQL_PASSWORD=iridium \\\n    -d mariadb:latest\n</code></pre> <p>Now you'll be able to start and stop the MariaDb container with the following commands.</p> <pre><code>$ docker stop iridium-db\n$ docker start iridium-db\n</code></pre>"},{"location":"4.-connecting-social-identity-providers/create-github-application/","title":"Create a Github Application","text":"<p>You can create one by filling out the form here.</p> <p></p> <p>For the form values enter the following:</p> <ul> <li><code>ApplicationName</code>: Any name you wish.  In this example we use \"MyIridiumInstance\"</li> <li><code>Homepage URL</code>: http://localhost:4200.</li> <li><code>Authorization callback URL</code>: http://localhost:4200/dashboard</li> </ul>"},{"location":"4.-connecting-social-identity-providers/create-github-application/#get-your-client-id","title":"Get your Client ID","text":"<p>After the application is created you'll need to create a secret for it. 1. Make sure to capture your \"Client ID\" value. You'll need while initializing  Iridium 2. Generate a secret for your Github application by clicking on the  \"Generate new client secret\" button.  </p>"},{"location":"4.-connecting-social-identity-providers/create-github-application/#capture-the-github-secret","title":"Capture the Github Secret","text":"<ol> <li>After a secret is created you'll need to capture that value to use with the CLI tool.</li> </ol>"}]}