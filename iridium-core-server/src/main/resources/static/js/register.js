
function register(action) {

    console.log('action ', action)

    if (!window.PublicKeyCredential) { /* Client not capable of the API. Handle error. */ }
    const emailInput = document.querySelector('.email-address-input').value;
    // change form name
    let challenge = document.querySelector("#registrationChallenge").value;

    console.log('challenge: ', challenge)

    PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()
        .then(function (uvpaAvailable) {
            if (uvpaAvailable) {
                return true;
            }
            return false;
        }).then( (userSaidYes) => {
        // If there is a user-verifying platform authenticator
        // AND the user wants to create a credential
        if (userSaidYes) {
            console.log('then block challenge ', challenge)
            return navigator.credentials.create({ publicKey: {
                    // the challenge needs to be generated by the server
                    challenge: Uint8Array.from(
                        challenge, c => c.charCodeAt(0)),
                    // the relying party needs to come from server
                    // the id needs to match the domain
                    rp: { id: "localhost", name: "Some Tenant Name" },
                    user: {
                        id: Uint8Array.from(emailInput, c => c.charCodeAt(0)),
                        name: emailInput,
                        displayName: ""
                    },
                    pubKeyCredParams: [
                        {
                            type: "public-key",
                            alg: -7 // "ES256"
                        }
                    ],
                    authenticatorSelection: {
                        userVerification: "required",
                    },
                    attestation: "direct"
                } });
        }
    }).then((newCredentialInfo) => {
        if (newCredentialInfo) {
            // Send new credential info to server for verification and registration.
            console.log('send new credential info', newCredentialInfo)
            const response = newCredentialInfo.response;
            const clientExtensionsResults =
                newCredentialInfo.getClientExtensionResults();
            console.log('response', response);
            console.log('clientExtensionResults');
            console.log(clientExtensionsResults)
            var enc = new TextDecoder("utf-8");
            console.log('clientDataJSON', enc.decode(response.clientDataJSON));
            var form = document.getElementById('passkeyForm')
            // Return authenticator data ArrayBuffer
            const authenticatorData = response.getAuthenticatorData();
            console.log('decoded attestation object data byte length' + newCredentialInfo.response.attestationObject.byteLength);
            console.log( newCredentialInfo.response.attestationObject);
            // Return public key ArrayBuffer
            const pk = response.getPublicKey();

            console.log('pk decoded ', enc.decode(pk));
            console.log('pk ', pk);

            // Return public key algorithm identifier
            const pkAlgo = response.getPublicKeyAlgorithm();
            console.log('pk algo ', pkAlgo)

            // Return permissible transports array
            const transports = response.getTransports();
            console.log('transports ', transports)

            form.elements['id'].value = newCredentialInfo.id;
            form.elements['rawId'].value = newCredentialInfo.rawId;
            form.elements['type'].value = newCredentialInfo.type;
            form.elements['authenticatorAttachment'].value = newCredentialInfo.authenticatorAttachment;
            form.elements['clientDataJSON'].value = enc.decode(response.clientDataJSON);
            form.elements['attestationObject'].value = newCredentialInfo.response.attestationObject;
            form.elements['authenticatorData'].value = response.getAuthenticatorData();
            form.elements['publicKey'].value = new Int8Array(response.getPublicKey());
            form.elements['algorithm'].value = response.getPublicKeyAlgorithm();
            form.elements['transports'].value = response.getTransports();


            console.log('form contains', form.elements)
            form.submit();
        }
    }).then((assertion) => {
        console.log("assertion", assertion)
    }).catch(function (err) {
        // Something went wrong. Handle appropriately.
        console.log('there was an error', err)
    });
}
