/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package software.iridium.api.model;

import java.util.HashMap;
import java.util.Map;
import software.iridium.api.util.AuthorizationCodeFlowConstants;

/** The authorization request. */
public class AuthorizationRequestHolder {

  private Map<String, String> paramsMap = null;

  /** Constructor for authorization factories. */
  public AuthorizationRequestHolder() {
    paramsMap = new HashMap<String, String>();
  }

  /**
   * Code = Indicates that your server expects to receive an authorization code.
   *
   * @return
   */
  public String getResponseType() {
    String responseType = paramsMap.get(AuthorizationCodeFlowConstants.RESPONSE_TYPE.getValue());
    if (responseType == null) {
      return "";
    }
    return responseType;
  }

  public void setResponseType(String responseType) {
    paramsMap.put(AuthorizationCodeFlowConstants.RESPONSE_TYPE.getValue(), responseType);
  }

  /**
   * A random string generated by your application, which you will idetify later.
   *
   * @return String
   */
  public String getState() {
    String state = paramsMap.get(AuthorizationCodeFlowConstants.STATE.getValue());
    if (state == null) {
      return "";
    }
    return state;
  }

  public void setState(String state) {
    paramsMap.put(AuthorizationCodeFlowConstants.STATE.getValue(), state);
  }

  /**
   * Indicates the URL to return the user to after authorization is complete, such as
   * org.example.app://redirect
   *
   * @return String
   */
  public String getRedirectUri() {
    String redirectUri = paramsMap.get(AuthorizationCodeFlowConstants.REDIRECT_URI.getValue());
    if (redirectUri == null) {
      return "";
    }
    return redirectUri;
  }

  public void setRedirectUri(String redirectUri) {
    paramsMap.put(AuthorizationCodeFlowConstants.REDIRECT_URI.getValue(), redirectUri);
  }

  /**
   * A unique Id that is provided when you create the application.
   *
   * @return String
   */
  public String getClientId() {
    String clientId = paramsMap.get(AuthorizationCodeFlowConstants.CLIENT_ID.getValue());
    if (clientId == null) {
      return "";
    }
    return clientId;
  }

  public void setClientId(String clientId) {
    paramsMap.put(AuthorizationCodeFlowConstants.CLIENT_ID.getValue(), clientId);
  }

  /**
   * Either plain or S256 (SHA256) this application will default to the SHA256 method.
   *
   * @return String
   */
  public String getCodeChallengeMethod() {
    String codeChallengeMethod =
        paramsMap.get(AuthorizationCodeFlowConstants.CODE_CHALLENGE_METHOD.getValue());
    if (codeChallengeMethod == null) {
      return "";
    }
    return codeChallengeMethod;
  }

  public void setCodeChallengeMethod(String codeChallengeMethod) {
    paramsMap.put(
        AuthorizationCodeFlowConstants.CODE_CHALLENGE_METHOD.getValue(), codeChallengeMethod);
  }

  /**
   * The code challenge is used in conjuntion with a code verifier the code verifier isn't exposed
   * to the calling API it is a cyptographically ramdom string between 43 and 128 charcters long.
   *
   * <p>Once the app has generated the code verifier, it uses that to derive the code challenge. For
   * devices that can perform a SHA256 hash, the code challenge is a Base64-URL-encoded string of
   * the SHA256 has of the code verifier.
   *
   * <p>The base64 encoding requires url safety which requires the following character conversions +
   * to - and / to _ and then trimming the trailing = froom the end.
   *
   * @return String
   */
  public String getCodeChallenge() {
    String codeChallenge = paramsMap.get(AuthorizationCodeFlowConstants.CODE_CHALLENGE.getValue());
    if (codeChallenge == null) {
      return "";
    }
    return codeChallenge;
  }

  public void setCodeChallenge(String codeChallenge) {
    paramsMap.put(AuthorizationCodeFlowConstants.CODE_CHALLENGE.getValue(), codeChallenge);
  }

  public String getValue(String key) {
    String value = paramsMap.get(key);
    if (value == null) {
      return "";
    }

    return value;
  }

  public Map<String, String> getParams() {
    return this.paramsMap;
  }

  public void setParams(Map<String, String> params) {
    this.paramsMap = params;
  }
}
