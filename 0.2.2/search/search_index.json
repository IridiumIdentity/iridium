{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Low code login management for data-driven applications","text":"<ul> <li>Iridium is an enterprise grade system for managing external customer identity and access management into your own systems.</li> <li>The management UI provides a low code interface to integrate any 3rd party identity provider into your own workflow.</li> </ul>"},{"location":"1.-Overview/iridium-database/","title":"Iridium database","text":""},{"location":"1.-Overview/iridium-database/#iridium-database","title":"Iridium Database","text":"<p>The Iridium database stores the data and metadata for an Iridium instance. Each Iridium instance uses its own database, which is hosted in a separate container to the primary application. The database can be treated as a simple repository rather than an independent data management system.</p> <p>In this document, the physical structure of the database will be laid out for both cursory reference and as a rough guide for developers aiming to reconfigure the system.</p>"},{"location":"1.-Overview/iridium-database/#abstract-overview","title":"Abstract Overview","text":"<p>Figure 1: Abstract Iridium database breakdown. </p> <p>Iridium uses a fairly linear data flow between its entities to achieve tasks. A third party <code>external identity provider</code> such as Google or Github is linked to an <code>application</code> secured with Iridium. Within a <code>tenant</code> container, <code>identities</code> of users are verified using Iridium. Within each <code>tenant</code> are <code>customer identities</code> (end-users) and <code>managing identities</code> (tenant-level system administrators).</p> <ul> <li>Managing Identity: System administrators for a tenant. There can be multiple managing identities per tenant.</li> <li>Customer Identity: Standard user of Iridium. At the level of tenant, each user is limited to one identity. However, users can make an identity for an unlimited number of tenants.</li> <li>Tenant: A tenant is a container for clients, representing an environment or organization. A single company using Iridium can register multiple tenants.</li> <li>Application: Applications are the specific apps secured with Iridium. They are bound to a tenant.</li> <li>Application Type: The types of applications securable by Iridium. Currently, this range is limited to a single page application such as Angular.</li> <li>External Identity Provider: Third party identity providers using Iridium to authenticate user credentials and gate access for users. Other Iridium instances can be external identity providers.</li> </ul>"},{"location":"1.-Overview/iridium-database/#system-breakdown","title":"System Breakdown","text":"<p>The default Iridium database does contain constrained relationships, but is primarily controlled through the java application. </p> <p>Developers who prefer using a relational database management system such as MariaDB to control data flow can still configure Iridium to their needs. Iridium is made to be manipulated and retooled to meet different developer's needs and standards.</p> <p>A Note on Reading the Diagrams</p> <p>Some entities reference a key attribute from another entity without using it as an identifying key. Such attributes will be marked \"ref.\" Real database entities directly correlating to roles in the abstract data flow will be <code>highlighted</code>. </p>"},{"location":"1.-Overview/iridium-database/#resource-access-entities","title":"Resource Access Entities","text":"<p>figure 2: Resource Access Entity Relationship Diagram</p> <p>Data Iridium uses to allow access to protected resources.</p> <ul> <li>[refresh_tokens]: Allows access tokens to be used again.</li> <li>[access_tokens]: Holds the hashes that allow access to protected resources.</li> <li>[authorization_codes]: Codes exchanged between client and Iridium, used by the client to request access and refresh tokens.</li> </ul>"},{"location":"1.-Overview/iridium-database/#tenants","title":"Tenants","text":"<p>figure 3: Tenant Entity Relationship Diagram</p> <p>A tenant is a container for clients, representing an environment or organization. A single company using Iridium can register multiple tenants.</p> <ul> <li>[login_descriptors]: Describes what the login page holds for each tenant.</li> <li><code>[tenants]:</code> Stores defining data for a tenant container. Tenant names are used in the tenant's login URL, so tenant names in the database must be URL safe.</li> </ul>"},{"location":"1.-Overview/iridium-database/#external-identity-providers","title":"External Identity Providers","text":"<p>figure 4: External Identity Provider Entity Relationship Diagram</p> <p>Entities holding configuration for external identity providers (Google, Github, Facebook) authenticating using Iridium. Other Iridium instances are registerable as external identity providers.</p> <ul> <li>[external_identity_provider_templates]: Templates for potential external identity providers.</li> <li>[external_identity_provider_parameter_templates]: Prebuilt parameter configurations for adding to an external identity provider.</li> <li><code>[external_identity_providers]:</code> Holds the seed data for an OpenID provider to authenticate with Iridium.</li> </ul>"},{"location":"1.-Overview/iridium-database/#external-identity-provider-workspace","title":"External Identity Provider Workspace","text":"<p>figure 5:External Identity Provider Workspace Entity Relationship Diagram</p> <p>Entities containing additional configuration and dynamic functions for an external identity provider.</p> <ul> <li>[access_token_parameters]: Configuration for access tokens specific to an external identity provider.</li> <li>[authorization_parameters]: Configuration for authorization codes, specific to an external identity provider.</li> <li>[external_identity_provider_parameters]: Additional configuration for a specific external identity provider.</li> <li>[in_progress_external_identity_provider_authorizations]: Container for the dynamic function of authorizing with an external identity provider.</li> </ul>"},{"location":"1.-Overview/iridium-database/#identities","title":"Identities","text":"<p>figure 6:Identities Entity Relationship Diagram</p> <p>Client authenticating with an external identity provider via Iridium. A single client may have multiple identities for different external identity providers.</p> <ul> <li>[profiles]: Holds basic client registration data.</li> <li><code>[identities]:</code> Clients registered with a specific external identity provider, contains both managing and customer identities.</li> <li>[tenants_identities_xref]: tenants/identities cross-reference.</li> </ul>"},{"location":"1.-Overview/iridium-database/#identity-workspace","title":"Identity Workspace","text":"<p>figure 7:Identities Workspace Entity Relationship Diagram</p> <p>Additional configuration entities and containers for dynamic functions related to identities.</p> <ul> <li>[identity_create_session_details]: Metadata storage for a single instance of registering an identity.</li> <li>[authentications]: active authorizations/codes/etc for user</li> <li>[identity_property]: additional configuration for a specific user.</li> <li>[identity_email_addresses]: emails associated with a user.</li> <li>[email_verification_tokens]: verification for registered user emails.</li> <li><code>[roles]:</code> User roles, contains delineations between managing and customer identities.</li> <li>[roles_identities_xref]: roles/identities cross-reference.</li> </ul>"},{"location":"1.-Overview/iridium-database/#applications","title":"Applications","text":"<p>figure 8:Applications Entity Relationship Diagram </p> <p>Applications are the specific apps secured with Iridium. They are bound to a tenant.</p> <ul> <li>[application_types]: All types of applications securable via Iridium</li> <li><code>[applications]:</code> Applications secured with Iridium. Applications are specific to a tenant.</li> <li>[client_secrets]: client secret codes associated with an application</li> <li>[scopes]: access parameters for an identity particular to an application</li> <li>[identities_applications]: identities/applications cross-reference.</li> </ul>"},{"location":"1.-Overview/overview/","title":"What is iridium?","text":"<p>Iridium is an OAuth 2.x-compliant customer identity and access management (CIAM) system designed for accessibility and configurability. Iridium integrates into any 3rd party management system with minimal code.</p>"},{"location":"1.-Overview/overview/#try-it-for-free","title":"Try it for free.","text":""},{"location":"1.-Overview/overview/#why-use-iridium","title":"Why use Iridium?","text":"<p>Iridium is an opinionated, scalable implementation for securing any system of any size. It comes with community support and ease of use built in.</p> <p>The OAuth 2.x specification leaves many details undefined. These details include security, authentication, and authorization. These omissions are deliberate, but they leave developers making best guesses at implementing sensitive processes.</p> <p>Iridium takes pressure off developers securing their applications and databases. Iridium is highly configurable and requires minimal technical knowledge to set up its basic features. As an open source project, Iridium can respond to the needs of its users by contributions from the users themselves.</p>"},{"location":"1.-Overview/overview/#what-does-iridium-do","title":"What does Iridium do?","text":"<p>In the OAuth 2.x framework, Iridium plays the role of an authorization server. Iridium's roles include authenticating user credentials, verifying redirect URIs match, and managing access/refresh tokens. The diagram below shows a simplified outline of the process.</p>"},{"location":"1.-Overview/overview/#legend","title":"Legend","text":"<ul> <li>Resource owner: Entity capable of granting access to a protected resource, often an end-user of an application.</li> <li>User-agent: Software for recieving, sending, and processing web content, such as a web browser. </li> <li>Client: A third-party application requesting access to the resource owner's protected resource. </li> <li>Authorization server/Iridium: Entity which validates credentials and distributes access tokens.</li> </ul> <p>Figure 1: OAuth 2.x authorization grant process</p> <ol> <li>Resource Owner visits Client.</li> <li>Resource Owner initiates sign-in process (usually by clicking a \"sign up with X\" button). Resource Owner redirected via User-agent to a sign-in page. Carried with the Resource Owner is a client identifier and a redirect URI.</li> <li>The Authorization Server authenticates the Resource Owner, and requests the Resource Owner's authorization for the client to access the Resource Owner's protected resource. Assuming Resource Owner allows Client access, the Authorization Server sends the User-agent back to the Client with an authorization code, using the Client's provided Redirect URI.</li> <li>The Client requests an access token from the Authorization Server with the newly acquired authorization code.</li> <li>Authorization Server authenticates client, registers the authorization code and confirms the redirect URI matches the URI in its own database. If all checks pass, Authorization Server returns an access token and an optional refresh token.</li> </ol> <p>OAuth's specification defines only how a system should behave, leaving the details of how to produce those behaviors up to developers. Iridium allows developers to configure their own system to their needs, without making their own software or outsourcing to an opaque service provider. </p>"},{"location":"1.-Overview/overview/#how-is-iridium-scalable","title":"How is Iridium scalable?","text":"<p>Figure 2: Iridium's Scalability Potential</p> <p>Iridium can integrate with existing OpenID Connect providers, and be used to create new OpenID Connect servers. Iridium can also delegate requests to other iridium instances.</p>"},{"location":"1.-Overview/overview/#how-is-iridium-architected","title":"How is Iridium architected?","text":"<p>Figure 3: Iridium System Architecture</p> <p>Iridium's architecture was built for simplicity. The system is served from a single jar tied to a relational database. This database requires specific seed data, but as long as this data exists, Iridium can function successfully. This means Iridium can plug into an existing OpenID system to start authenticating, authorizing, and provisioning access tokens right away.</p>"},{"location":"2.-Quick-Starts/quickstart-with-angular/","title":"Quickstart with Angular","text":"<p>This quickstart will show you how to secure an Angular application using Iridium. First, you\u2019ll need to navigate to https://conduct.iridium.software to log in to the Iridium management UI. You can choose GitHub or Google as your preferred provider. After authorizing the application you\u2019ll be redirected back to the Iridium UI.</p> <p>From here, select the \u201cCreate Tenant\u201d button.</p> <p></p> <p>When the modal appears you\u2019ll need to enter a tenant name that is unique within the system and URL friendly. This will be the subdomain value specific to your securing your users. For example, if the tenant name you choose is \u201cmy-tenant\u201d then your users will be directed to my-tenant.iridium.software to be logged in.</p> <p>For environment, you can select \u201csandbox\u201d.</p> <p></p> <p>Next, set up your login box.</p> <p></p> <p>We will configure the box to allow your users to use GitHub to log in to your application. Select the \u201cAdd Provider\u201d box to open the modal.</p> <p></p> <p>For the provider select \u201cGitHub\u201d. Fill out the fields with your GitHub application credentials</p> <p></p> <p>Next, we need to register your application for use within your tenant. Select \u201cApplication Management\u201d from the side menu.</p> <p></p> <p>Select \u201cCreate Application\u201d</p> <p></p> <p>Add the following values to the modal that pops up.</p> <p></p> <p>After the application is created, make sure to save the client ID for future reference.</p> <p></p> <p>Next, clone the Iridium Angular starter application and <code>cd</code> into the folder.</p> <pre><code>$ git clone git@github.com:IridiumIdentity/iridium-angular-example.git\n$ cd /iridium-angular-example\n</code></pre> <p>Open the environment.ts file for editing</p> <pre><code>$  vim src/app/environments/environment.ts\n</code></pre> <p>The environment.ts file should look like this:</p> <pre><code>export const environment = {\n  production: false,\n  iridium: {\n    domain: 'https://ENTER_YOUR_TENANT_NAME_HERE.iridium.software/',\n    redirectUri: 'http://localhost:4300/callback',\n    clientId: 'ENTER_YOUR_CLIENT_ID_HERE',\n    errorPath: '/error'\n  }\n};\n~\n</code></pre> <ul> <li>Replace \u201cENTER_YOUR_TENANT_NAME_HERE\u201d with the tenant name you created earlier</li> <li>Replace \u201cENTER_YOUR_CLIENT_ID_HERE\u201d with the application id generated earlier</li> </ul> <p>Run your application</p> <pre><code>npm install &amp;&amp; ng serve\n</code></pre> <p>Navigate to <code>localhost:4300</code>, select login in the top menu bar.</p> <p></p> <p>You should be redirected to your personalized login domain. Select \u201cLogin With GitHub\u201d</p> <p></p> <p>You\u2019ll be redirected to GitHub. The view should show details specific to the application you registered with GitHub.</p> <p></p> <p>(If you ever want to revoke the gitHub authorization, refer to this documentation)</p> <p>Select \u201cAuthorize ${your-github-name}\u201d and you should be redirected back to your Angular application with confirmation of successful authorization.</p> <p></p> <p>Congratulations, you have successfully registered and secured an application with Iridium! </p> <p>This project is still in its early stages, we\u2019d like you to join us.  </p> <p>If you have any comments, questions, or concerns (maybe a new framework client built for you) join the community in GitHub discussions here: https://github.com/orgs/IridiumIdentity/discussions.</p>"},{"location":"2.-Quick-Starts/quickstart-with-nextjs/","title":"Quickstart with Next.js","text":"<p>This document assumes you have already created a tenant and configured your login box with Iridium.</p> <p>First, we need to register your Next.js application with in Iridium.</p> <p>Select \u201cApplication Management\u201d from the side menu.</p> <p></p> <p>Select \u201cCreate Application\u201d</p> <p></p> <p>Add the following values to the modal that pops up.</p> <ul> <li>Application Type: <code>Single Page Application</code></li> <li>Application Name: <code>${YOUR_APPLICATION_NAME}</code></li> <li>Homepage URL: <code>http://localhost:3000</code></li> <li>Authorization Callback URL: <code>http://localhost:3000/callback</code></li> </ul> <p>After the application is created, make sure to save the client ID for future reference.</p> <p></p> <p>Next, clone the Iridium Next.js starter application and <code>cd</code> into the folder.</p> <pre><code>$ git clone https://github.com/IridiumIdentity/iridium-nextjs-example\n$ cd /iridium-nextjs-example\n</code></pre> <p>Create the environment file for Next.js to read your Iridium properties from. </p> <pre><code>$  touch .env.local\n</code></pre> <p>Open the file with a text editor of your choice and enter the below as the contents.</p> <pre><code>NEXT_PUBLIC_IRIDIUM_DOMAIN=https://ENTER_YOUR_TENANT_NAME_HERE.iridium.software/\nNEXT_PUBLIC_IRIDIUM_REDIRECT_URI=http://localhost:3000/callback\nNEXT_PUBLIC_IRIDIUM_CLIENT_ID=ENTER_YOUR_CLIENT_ID_HERE\n</code></pre> <ul> <li>Replace \u201cENTER_YOUR_TENANT_NAME_HERE\u201d with the tenant name you created earlier</li> <li>Replace \u201cENTER_YOUR_CLIENT_ID_HERE\u201d with the application id generated earlier</li> </ul> <p>Run your application</p> <pre><code>$ npm install &amp;&amp; npm run dev\n</code></pre> <p>Navigate to <code>localhost:3000</code>, select login in the right of the screen</p> <p></p> <p>You should be redirected to your personalized login domain. Select \u201cLogin With GitHub\u201d</p> <p></p> <p>You\u2019ll be redirected to GitHub. The view should show details specific to the application you registered with GitHub.</p> <p></p> <p>(If you ever want to revoke the gitHub authorization, refer to this documentation)</p> <p>Select \u201cAuthorize ${your-github-name}\u201d and you should be redirected back to your Next.js application with confirmation of successful authorization.</p> <p></p> <p>Congratulations, you have successfully registered and secured a Next.js application with Iridium!  </p> <p>This project is still in its early stages, we\u2019d like you to join us.    </p> <p>If you have any comments, questions, or concerns (maybe a new framework client built for you) join the community:  * GitHub Discussions. * Discord.</p>"},{"location":"2.-Quick-Starts/revoking-github-authorization/","title":"Revoking github authorization","text":"<p>Below outline the steps required to revoke the Iridium app from GitHub</p> <ol> <li>Log into you Github Account</li> <li>Click on the settings icon on the sidebar</li> <li>Search and click on the Applications settings under the Integrations section</li> </ol> <p></p> <ol> <li>Find your Iridium application and click on the corresponding configure button    (You might be asked to enter the password at this point to authenticate the user)</li> <li>Find the Uninstall button in the Danger Zone section of the settings</li> </ol> <p></p> <p>For further help, refer to the official GitHub documentation</p>"},{"location":"3.-Running-Locally/1.Install-the-CLI/","title":"Install the CLI","text":""},{"location":"3.-Running-Locally/1.Install-the-CLI/#youll-need-the-following-to-run-iridium-locally","title":"You'll need the following to run iridium locally:","text":"<ul> <li>Node 18</li> <li>Java 17</li> <li>Docker</li> </ul> <p>Or try it for free</p>"},{"location":"3.-Running-Locally/1.Install-the-CLI/#download-the-release-package","title":"Download the release package:","text":"<pre><code>$ wget https://github.com/IridiumIdentity/iridium/releases/download/v0.2.1/iridium-0.2.1-bin.tar.gz\n</code></pre>"},{"location":"3.-Running-Locally/1.Install-the-CLI/#unzip-the-package","title":"Unzip the package","text":"<pre><code>$ tar -xzf iridium-0.2.1-bin.tar.gz\n</code></pre> <p>For the rest of this setup all commands are run from the root of the distribution folder, so switch to it:</p> <pre><code>$ cd iridium-0.2.1-bin\n</code></pre>"},{"location":"3.-Running-Locally/1.Install-the-CLI/#verify-installation","title":"Verify Installation","text":"<p>You can check that you successfully installed iridium by executing the cli tool</p> <pre><code>$ bin/iridium --help\n</code></pre> <p>Your output should be similar to the following</p> <pre><code>bin/iridium --help\nUsage: iridium [-hV] [COMMAND]\niridium management cli\n  -h, --help      Show this help message and exit.\n  -V, --version   Print version information and exit.\nCommands:\n  init  inits the system\n  run   run iridium\n</code></pre>"},{"location":"3.-Running-Locally/1.Install-the-CLI/#list-the-contents-of-the-file-by-executing","title":"List the contents of the file by executing","text":"<pre><code>ls -1f\n</code></pre>"},{"location":"3.-Running-Locally/1.Install-the-CLI/#the-following-directories-and-files-are-created","title":"The following directories and files are created","text":"<pre><code>tools\nLICENSE\nbin\nbootIridium.sh\niridium-angular-client\nREADME.md\nlib\nconf\n</code></pre> <p>Descriptions of each file or folder are below; |Directory / File | Description | ||| | <code>tools</code> | holds tool configurations to help Iridium run, e.g. Docker Compose | | <code>conf</code>  | Configuration files for Iridium | | <code>lib</code> | jars used by Iridium | | <code>bin</code> | the <code>iridium</code> entry point |</p> <p>Now you can stand up Iridium locally</p>"},{"location":"3.-Running-Locally/2.run-iridium-locally/","title":"Stand up locally","text":""},{"location":"3.-Running-Locally/2.run-iridium-locally/#youll-need-the-following-to-run-iridium-locally","title":"You'll need the following to run iridium locally:","text":"<ul> <li>Node 18</li> <li>Java 17</li> <li>Docker</li> </ul> <p>Iridium is dependent on an RDBMS system such as MySQL or MariaDB.</p> <p>Note: all commands are run from the root of the distribution folder you downloaded and extracted in the previous step, The set-up in this document is not intended for production purposes.</p>"},{"location":"3.-Running-Locally/2.run-iridium-locally/#want-help-running-iridium","title":"Want help running Iridium?","text":"<p>Try our hosted solution for free</p>"},{"location":"3.-Running-Locally/2.run-iridium-locally/#stand-up-the-database","title":"Stand up the database","text":"<p>Run an instance of MariaDB locally. </p> <pre><code>$ docker run  --name mariadb \\\n    -p 3306:3306 \\\n    -e MYSQL_ROOT_PASSWORD=iridium \\\n    -e MYSQL_DATABASE=identities \\\n    -e MYSQL_USER=iridium \\\n    -e MYSQL_PASSWORD=iridium \\\n    -d mariadb:latest\n</code></pre> <p>Now you'll be able to start and stop the MariaDB container with the following commands.</p> <pre><code>$ docker stop mariadb\n$ docker start mariadb\n</code></pre> <p>At this point you have an instance of MariaDB. You can verify this by executing <code>docker ps</code>, you should see similar output like below</p> <pre><code> docker ps\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED         STATUS         PORTS                                        NAMES\na44c37b6d4c1   mariadb:10.6.11                              \"docker-entrypoint.s\u2026\"   6 seconds ago   Up 3 seconds   0.0.0.0:3306-&gt;3306/tcp                       mariadb\n</code></pre> <p>We still need to initialize the database with specific data for Iridium to function</p>"},{"location":"3.-Running-Locally/2.run-iridium-locally/#initialize-the-iridium-database","title":"Initialize the Iridium Database","text":"<p>Iridium needs specific data entities to exist for it to function. This guide demonstrates how to use the iridium CLI to execute this task.  This document assumes you have downloaded and unpacked the binary distribution of Iridium in a previous step as detail here.</p> <p>To initialize the database execute the following command.  Again we are expecting you to be in the top level folder of expanded tar.gz distribution you downloaded and unpacked earlier.</p> <p>NOTE Iridium init is meant to be non-destructive in that if you initialize the database once it will not work again.  You will need to bring your  containers all the way down to run the <code>init</code> function again. </p> <ol> <li>Initialize with a social provider</li> </ol>"},{"location":"3.-Running-Locally/2.run-iridium-locally/#initialize-with-iridium-with-a-login-provider","title":"Initialize with Iridium with a Login Provider","text":"<p>Again we are expecting you to be in the top level folder of expanded tar.gz distribution you downloaded and unpacked earlier. For ease of getting started lets focus on using only one provider at the moment. You'll need to set your GitHub Client credentials in the file below.  Instructions on how to do this with GitHub are here.  You can do this by executing. </p> <pre><code>$ vim conf/external-providers.yaml\n</code></pre> <p>Modify the contents of the file to match below, you'll need to modify the values to be specific for your GitHub Oauth application. You will want to remove the Google YAML block for this quick start. </p> <pre><code>- name: \"github\"\n  clientId: \"${yourClientId}\"\n  clientSecret: \"${yourClientSecret\"\n</code></pre>"},{"location":"3.-Running-Locally/2.run-iridium-locally/#initialize-the-database","title":"Initialize the database","text":"<p>Run the following command to initialize the database with the GitHub credentials, and other needed entities for Iridium to run.</p> <pre><code>$ ./bin/iridium init \n</code></pre> <p>Upon successful initialization of the database you'll see similar output.  </p> <pre><code>06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Database successfully initialized\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Iridium Management Application ID is localRunIdChangeForProduction\n06:22:59.885 [main] INFO  software.iridium.cli.command.InitCommand - Be sure to place this in the appropriate environment.ts file\n</code></pre> <p>Since this is a local run, you will not need to update your <code>environment.ts</code> as stated above.</p>"},{"location":"3.-Running-Locally/2.run-iridium-locally/#run-the-iridium-core-server","title":"Run the Iridium Core Server","text":"<p>Run the following command, again this is from the top level folder of the distribution you downloaded.</p> <pre><code>$ export SPRING_CONFIG_LOCATION=./conf/application.properties\n$  java -jar ./lib/iridium-core-server-${iridium-version}.jar\n</code></pre> <p>If you want to run Iridium from source, Follow the instructions to run Iridium from Intellij here.  From here, you should be able to log in to the Iridium Management UI using your GitHub account. At this point you've stood up the system with an Iridium tenant and an associated management application. </p>"},{"location":"3.-Running-Locally/3.stand-up-the-iridium-ui/","title":"Stand up the Iridium Management UI","text":""},{"location":"3.-Running-Locally/3.stand-up-the-iridium-ui/#clone-the-repo","title":"Clone the Repo","text":"<pre><code>$ git clone git@github.com:IridiumIdentity/admin-ui.git\n</code></pre>"},{"location":"3.-Running-Locally/3.stand-up-the-iridium-ui/#cd-into-the-angular-project-and-install-dependencies","title":"<code>cd</code> into the Angular project and install dependencies","text":"<pre><code>$ cd admin-ui &amp;&amp; npm install\n</code></pre>"},{"location":"3.-Running-Locally/3.stand-up-the-iridium-ui/#serve-locally","title":"Serve locally","text":"<pre><code>$ ng serve\n</code></pre> <p>The next step is log in the management UI by using a social provider (such as GitHub) to access the system by visiting http://localhost:4200 in your browser.</p> <p>From here, you can create tenants, associate social providers, single page applications or server apps in via the UI to be secured by Iridium.</p>"},{"location":"3.-Running-Locally/4.run-iridium-with-docker/","title":"Stand up locally with Docker","text":""},{"location":"3.-Running-Locally/4.run-iridium-with-docker/#youll-need-the-following-to-run-iridium-locally","title":"You'll need the following to run iridium locally:","text":"<ul> <li>Node 18</li> <li>Java 17</li> <li>Docker</li> </ul> <p>Iridium is dependent on an RDBMS system such as MySQL or MariaDB</p> <p>We will use Docker Compose to simplify the setup process.  You can go about completing this step by either checking out the repo locally or using the Docker Compose file contents below.</p>"},{"location":"3.-Running-Locally/4.run-iridium-with-docker/#serve-iridium-from-the-repo","title":"Serve Iridium from the repo","text":"<p>Clone the repo</p> <pre><code>$ git clone git@github.com:IridiumIdentity/iridium.git\n</code></pre> <p><code>cd</code> into the project</p> <pre><code>$ cd iridium\n</code></pre> <p>Before running the compose command below be sure to set the environment variable HOST_INTERNAL.  This ip address should be set to whatever your default gateway is.  This is typically the ip address of your router on a home network.  The address below is just an example.</p> <pre><code>export HOST_INTERNAL=192.168.1.x\n</code></pre> <p>Stand up mariadb, the latest version of the core iridium server</p> <pre><code>$ docker compose -f tools/schedulers/compose/local-iridium-compose.yml up -d\n</code></pre> <p>At this point you have a version of the Iridium core server and an instance of MariaDB We still need to initialize the database with specific data for Iridium to function.</p> <p>You can verify this by executing <code>docker ps</code>, you should see similar output like below</p> <pre><code> docker ps\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED         STATUS         PORTS                                        NAMES\na44c37b6d4c1   mariadb:10.6.11                              \"docker-entrypoint.s\u2026\"   6 seconds ago   Up 3 seconds   0.0.0.0:3306-&gt;3306/tcp                       mariadb\nb919d4ffcf56   iridiumidentity/iridium-core-server:latest   \"java -jar /opt/java\u2026\"   6 seconds ago   Up 4 seconds   0.0.0.0:8381-&gt;8381/tcp                       iridium\n</code></pre> <p>It may take the iridium core server about 30 seconds to fully come up.  You can verify all is good by watching the logs by executing <code>docker logs iridium -f</code>.</p> <p>When you see the following, the server is ready to go.</p> <pre><code>main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8381 (http) with context path ''\nmain] software.iridium.api.Iridium             : Started Iridium in 64.841 seconds (process running for 74.472)\n</code></pre> <p>Next, you should initialize the database</p>"},{"location":"3.-Running-Locally/4.run-iridium-with-docker/#initialize-the-iridium-database","title":"Initialize the Iridium Database","text":"<p>Iridium needs specific data entities to exist for it to function. This guide demonstrates how to use the iridium CLI to execute this task.  This document assumes you have downloaded and unpacked the binary distribution of Iridium in a previous step as detail here.</p> <p>To initialize the database execute the following command.  Again we are expecting you to be in the top level folder of expanded tar.gz distribution you downloaded and unpacked earlier.</p> <p>NOTE You can initialize Iridium with or without a social provider at start up.  Quick links are below.  Iridium init is meant to be non-destructive in that if you initialize the database once it will not work again.  You will need to bring your containers all the way down to run the <code>init</code> function again.</p>"},{"location":"3.-Running-Locally/4.run-iridium-with-docker/#initialize-with-iridium-with-the-github-login-provider","title":"Initialize with Iridium with the GitHub Login Provider","text":"<p>Follow the directions here, then come back to this page.</p> <p>Upon successful initialization of the database you'll see similar output.  At this point you can start to create your own tenant and applications in Iridium to be secured.</p> <pre><code>06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Database successfully initialized\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - ########################################\n06:22:59.884 [main] INFO  software.iridium.cli.command.InitCommand - Iridium Management Application ID is ${someApplicationId}\n06:22:59.885 [main] INFO  software.iridium.cli.command.InitCommand - Be sure to place this in the appropriate environment.ts file\n</code></pre> <p>From here you need to take your generated id <code>${someApplicationId}</code> and stand up the Iridium Management UI.</p>"},{"location":"3.-Running-Locally/4.run-iridium-with-docker/#stand-up-the-iridium-management-ui","title":"Stand up the Iridium Management UI","text":"<p>The rest of this document assumes you have cloned the iridium repository, and you are in the root directory of project.</p> <p>Update your environment.ts file with correct application ID.  From the top level directory it's located at:</p> <pre><code>iridium-angular-client/projects/iridium-ui/src/environments/environment.ts\n</code></pre> <p>The file should look like this before you add your client id</p> <pre><code>export const environment = {\n  production: false,\n  iridium: {\n    domain: 'http://localhost:8381/',\n    redirectUri: 'http://localhost:4200/callback',\n    clientId: 'YOUR_CLIENT_ID',\n    errorPath: '/error'\n  }\n};\n</code></pre> <p>After the change it will look like this.  Keep in mind to swap out your real application id for <code>${someApplicationId}</code></p> <pre><code>export const environment = {\n  production: false,\n  iridium: {\n    domain: 'http://localhost:8381/',\n    redirectUri: 'http://localhost:4200/callback',\n    clientId: '${someApplicationId}',\n    errorPath: '/error'\n  }\n};\n</code></pre> <p><code>cd</code> into the Angular project</p> <pre><code>$ cd iridium-angular-client/\n</code></pre> <p>build the <code>ngx-iridium-client</code> and the management UI.</p> <pre><code>$ ng build ngx-iridium-client &amp;&amp; ng serve\n</code></pre> <p>At this point you are ready to use Iridium to secure your system. You've stood up the  Iridium Core Server, and the management UI.</p> <p>The next step is log in the management UI using either the local user you created (username/password) or the by using a social provider (such as GitHub) to access the system by visiting http://localhost:4200 in your browser.</p> <p>From here, you can create tenants and associate single page applications or server apps in the UI to be secured by Iridium.</p>"},{"location":"3.-Running-Locally/building-from-source/","title":"Building from source","text":""},{"location":"3.-Running-Locally/building-from-source/#prerequisites","title":"Prerequisites","text":"<p>You will need.  -  Node 18  -  Java 17  -  Maven 3.8.4 or greater  </p>"},{"location":"3.-Running-Locally/building-from-source/#compiling-from-source","title":"Compiling from source","text":"<p>Iridium is with Maven.  From the top level directory you can execute a <code>mvn clean package</code> to build all the submodules. You should see the following if you are successful.</p> <pre><code>[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for iridium {iridium-version}:\n[INFO] \n[INFO] iridium ............................................ SUCCESS [  0.979 s]\n[INFO] iridium-java-client ................................ SUCCESS [  7.152 s]\n[INFO] iridium-core-entity ................................ SUCCESS [  2.365 s]\n[INFO] iridium-server-base ................................ SUCCESS [  5.724 s]\n[INFO] iridium-core-server ................................ SUCCESS [ 15.957 s]\n[INFO] iridium-cli ........................................ SUCCESS [ 11.330 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  44.164 s\n[INFO] Finished at: 2023-06-24T20:08:32-05:00\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>After compiling, the distribution that contains the code needed to run iridium can be found at</p> <pre><code>{ProjectRoot}/iridium-cli/target/iridium-{iridium-version}-bin.tar.gz\n</code></pre> <p>Currently, the management UI is managed by separate build process.  In future revisions will work to consolidate the  separate build processes into easier to manage commands.  You can build the management UI by following the commands below. All commands are assuming you are starting at the top level directory of the Iridium project.</p> <pre><code>$ cd iridium-angular-client\n$ npm install\n$ ng build ngx-iridium-client\n$ ng serve\n</code></pre>"},{"location":"3.-Running-Locally/developing-with-an-IDE/","title":"Developing with an IDE","text":""},{"location":"3.-Running-Locally/developing-with-an-IDE/#prerequisites","title":"Prerequisites","text":"<p>You will need:  -  Node 18  -  Java 17  -  Maven 3.8.4 or greater  </p> <p>Known compatible IDEs: - Intellij - Visual Studio Code - Spring Tools Suite</p> <p>Clone the repository.</p> <pre><code>$ git clone git@github.com:IridiumIdentity/iridium.git\n</code></pre> <p><code>cd</code> into the root folder.</p> <pre><code>$ cd iridium\n</code></pre> <p>If you have not already, compile from source. </p> <pre><code>$ mvn clean package\n</code></pre> <p>When Maven has finished successfully, you will see the following.</p> <pre><code>[INFO] -----------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:08 min\n[INFO] Finished at: 2023-09-11T12:54:42-07:00\n[INFO] -----------------------------------------------------------------------\n</code></pre>"},{"location":"3.-Running-Locally/developing-with-an-IDE/#setting-up","title":"Setting up","text":""},{"location":"3.-Running-Locally/developing-with-an-IDE/#use-launcher-script","title":"Use launcher script","text":""},{"location":"3.-Running-Locally/developing-with-an-IDE/#current-supported-operating-systems","title":"Current supported operating systems","text":"<ul> <li>darwin (OSX) From the root folder of the repo you can execute the following command to open the project in Intellij.</li> </ul> <pre><code>$ ./tools/scripts/setup-intellij.sh\n</code></pre>"},{"location":"3.-Running-Locally/developing-with-an-IDE/#use-intellij-gui","title":"Use Intellij GUI","text":"<p>Iridium is a standard Maven project. Simply go to <code>File -&gt; Open...</code> then select the top level folder of the iridium project on your computer.</p> <p></p>"},{"location":"3.-Running-Locally/developing-with-an-IDE/#copy-applicationproperties","title":"Copy application.properties","text":"<p>In an IDE, Springboot will not find the <code>application.properties</code> file in its default directory. To start Iridium on your IDE, copy the file to a recognized location.</p>"},{"location":"3.-Running-Locally/developing-with-an-IDE/#use-cli","title":"Use CLI","text":"<p>To successfully start Iridium on your IDE, run the following command from the top of the <code>iridium</code> directory. </p> <pre><code>$ cp ./conf/core-application.properties ./iridium-core-server/src/main/resources\n</code></pre> <p>Any changes you make to <code>application.properties</code> will need to be updated on both files.</p>"},{"location":"3.-Running-Locally/developing-with-an-IDE/#use-intellij-gui_1","title":"Use Intellij GUI","text":"<p>Initial location of the <code>application.properties</code> file:</p> <p></p> <p>where to paste the file:</p> <p></p>"},{"location":"3.-Running-Locally/developing-with-an-IDE/#run-iridium","title":"Run Iridium","text":"<p>Iridium requires <code>Springboot</code> to run on an IDE. If you do not have Springboot in your IDE, download an extension or plugin that adds it as a run configuration.</p> <p>To run Iridium on your IDE, you will need to run from <code>Iridium.java</code>. This can be found in the <code>iridium-core-server</code> directory:</p> <p></p> <p>Certain IDEs use different run configurations. If you are having trouble starting Iridium, see below.</p> <ul> <li>Intellij: If Intellij does not automatically recognize as a springboot application, then run as a springboot application.</li> <li>Visual Studio Code: Run as a java application.</li> <li>Spring Tools Suite/Eclipse: Run as a springboot application. Ensure your preferred openJDK instance is not in conflict with the IDE's inbuilt version.</li> </ul>"},{"location":"3.-Running-Locally/setting-properties/","title":"Configuration","text":"<p>Iridium's core server needs a set of required properties to be set. </p> <p>An example for local configuration is located here</p>"},{"location":"3.-Running-Locally/using-docker-for-development/","title":"Using Docker for development","text":"<p>Run the following command to set up MariaDB on your local machine.</p> <pre><code>$ docker compose -f tools/schedulers/compose/local-dev-compose.yml up [-d]\n</code></pre> <p>Now you'll be able to start and stop the MariaDb container with the following commands.</p> <pre><code>$ docker stop iridium-db\n$ docker start iridium-db\n</code></pre>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/","title":"Single Page Apps","text":"<p>Building Authorization Code Flow libraries for use with Iridium requires a few steps.</p> <ul> <li>Understanding the Authorization Code Flow Grant Type</li> <li>The endpoints used in the Authorization Flow</li> </ul>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#understanding-the-authorization-code-flow","title":"Understanding the Authorization Code Flow","text":"<p>The authorization code flow is used to get access tokens and refresh tokens.  This flow is based on redirection.</p> <p></p> <ol> <li>The resource owner (end-user) visits a third-party client (web application)</li> <li>The resource owner selects the \u201csign up with Google\u201d button in the client. The user-agent (browser) directs the resource owner to the Google sign-in page.</li> <li>The resource owner (end-user) authenticates and authorizes the authorization server to grant access to the resource owner's information (in this case it could be the email address and profile information) to the third-party client.</li> <li>After the resource owner (end-user) authorizes access, the authorization server redirects the user-agent (browser) back to the original third-party client with an authorization code and typically a state parameter</li> <li>The third-party client requests an access token with the received authorization code and associated redirect URI</li> <li>The authorization authenticates the client, validates the authorization code and the accompanying redirect URI matches the URI provided in step D.  If the request is valid the authorization server returns back with an access token and an optional refresh token.</li> </ol>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#endpoints-used-in-the-authorization-code-flow","title":"Endpoints used in the Authorization Code Flow","text":"<p>When building clients for Iridium, there are three main RESTful endpoints you need to be familiar with.</p> <ol> <li>The authorization endpoint</li> <li>The token endpoint</li> <li>The refresh token endpoint</li> </ol>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#the-external-provider-authorization-endpoint","title":"The external provider authorization endpoint","text":"<ul> <li>Method: <code>POST</code></li> <li>Endpoint: <code>${serverRoot}/oauth/external/authorize</code></li> </ul>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#query-params","title":"Query Params","text":"<ul> <li> Query Parameter Type Description response_type string Required The value must be <code>code</code> state string Required This is an opaque value to maintain state between the initial authorization request and the callback. scope string Required Depending on the provider you are authorizing with will determine the value here.  As an example, if you are using GitHub a safe default is <code>user:email</code> client_id string Required The client identifier. This is an opaque and unique string generated for the client after registration of it within Iridium. provider string Required This must be either <code>github</code> or <code>google</code>.  This parameter is subject to change in upcoming releases. code_challenge_method string Required This must be <code>S256</code> code_challenge string Required The code challenge is derived from the <code>code_verifier</code> (listed below).<code>code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))</code> </li> <li> <p>Response:</p> <ul> <li>If the request is valid the (end-user) will be redirected to the external identity provider for authorization by the Iridium server.</li> </ul> </li> </ul>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#creating-the-code-verifier","title":"Creating the code verifier","text":"<p>This is a high-entropy cryptographic random string using the unreserved characters [A-Z], [a-z], [0-9], \"-\", \".\", \"_\", \"~\".  It is <code>recommended</code> that the output of a suitable random number generator be used to create a 32-octet sequence.  The octet sequence is then base64url-encoded to produce a 43-octet URL safe string to use as the code verifier.</p>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#the-token-endpoint","title":"The token endpoint","text":"<ul> <li>Method: <code>POST</code></li> <li>Endpoint: <code>${serverRoot}/oauth/token</code></li> </ul>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#query-params_1","title":"Query Params","text":"Query Parameter Type Description grant_type string Required This value must be set to <code>authorization_code</code> code string Required This is the authorization code recieved from the Iridium server redirect_uri string This must match exactly the URI at the above request client_id string Required Unless authentication is supplied via HTTP Basic Auth header using the client ID as the username and secret as the password, or by accepting the strings in the post body as <code>client_id</code> and <code>client_secret</code> code_verfier string Required The <code>code_verifier</code> provided at the above request ### Response: * If the request is successful the response will look similar to the following: <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\n\n{\n  \"access_token\":\"someAccessTokenValue\",\n  \"token_type\":\"Bearer\",\n  \"expires_in\":3600,\n  \"refresh_token\":\"SomeRefreshTokenValue\",\n}\n</code></pre>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#the-refresh-token-endpoint","title":"The refresh token endpoint","text":"<ul> <li>Method: <code>POST</code></li> <li>Endpoint: <code>${serverRoot}/oauth/token/refresh</code></li> </ul>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#query-params_2","title":"Query Params","text":"Query Parameter Type Description grant_type string Required This value must be set to <code>refresh_token</code> refresh_token string Required The refresh token client_id string Required The client identifier. This is an opaque and unique string generated for the client after registration of it within Iridium. ### Response: * If the request is successful the response will look similar to the following: <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\n\n{\n  \"access_token\":\"someAccessTokenValue\",\n  \"token_type\":\"Bearer\",\n  \"expires_in\":3600,\n  \"refresh_token\":\"SomeRefreshTokenValue\",\n}\n</code></pre>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#the-logout-endpoint","title":"The logout endpoint","text":"<ul> <li>Method: <code>DELETE</code></li> <li>Endpoint: <code>${serverRoot}/application/${clientId}/tokens</code></li> </ul>"},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#path-variables","title":"Path Variables","text":"Path Variable Type Description client_id string Required The client identifier. This is an opaque and unique string generated for the client after registration of it within Iridium."},{"location":"4.-Extending-Iridium/1.building-single-page-app-libraries/#headers","title":"Headers","text":"Header Value Description Authorization Bearer Required The users bearer token ### Response: * If the request is successful the response will look similar to the following: <pre><code>HTTP/1.1 204 No Content\n</code></pre> <p>An example on how invoke is below:</p> <pre><code>$ curl --location --request DELETE 'http://localhost:8381/applications/localRunIdChangeForProduction/tokens' \\\n--header 'Authorization: Bearer {SomeTokenValue}' \n</code></pre>"},{"location":"4.-Extending-Iridium/2.building-server-side-libraries/","title":"Server Side Apps","text":"<p>In some cases an application may need to authenticate itself, rather than a human user.  An example of this could be  an application that must spin up at some set interval and run some logic that requires authentication and authorization.  In  this case the application would need to get it's own <code>access_token</code>. This is why we provide the <code>client_credentials</code> grant type.</p>"},{"location":"4.-Extending-Iridium/2.building-server-side-libraries/#the-token-endpoint","title":"The token endpoint","text":"<ul> <li>Method: <code>POST</code></li> <li>Endpoint: <code>${serverRoot}/oauth/token</code></li> </ul>"},{"location":"4.-Extending-Iridium/2.building-server-side-libraries/#query-params","title":"Query Params","text":"Query Parameter Type Description grant_type string Required This value must be set to <code>client_credential</code>"},{"location":"4.-Extending-Iridium/2.building-server-side-libraries/#headers","title":"Headers","text":"Header Value Description Authorization Basic Required The users bearer token <ul> <li>An example of how to create the <code>base64EncodedClientIdAndSecret</code> is below:</li> </ul> <pre><code>$ echo -n \"yourClientId:yourClientSecret\" | base64\n</code></pre>"},{"location":"4.-Extending-Iridium/2.building-server-side-libraries/#response","title":"Response:","text":"<pre><code>* If the request is successful the response will look similar to the following:\n</code></pre> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\n\n{\n  \"access_token\":\"someAccessTokenValue\",\n  \"token_type\":\"Bearer\",\n  \"expires_in\":3600,\n  \"refresh_token\":\"SomeRefreshTokenValue\",\n}\n</code></pre>"},{"location":"4.-Extending-Iridium/2.building-server-side-libraries/#an-example-of-how-to-invoke-is-below","title":"An example of how to invoke is below:","text":"<pre><code>$ curl --location --request POST 'http://localhost:8381/oauth/token?grant_type=client_credentials' \\\n--header 'Authorization: Basic TheBase64EncodedClientIdAndSecret==' \n</code></pre>"},{"location":"5.-External-Identity-Providers/create-github-application/","title":"Create a GitHub Application","text":"<p>Note  If you are standing up the Iridium UI you can use the values specified in the Form Values section of this page.  </p> <p>If you are using your own app, you will need to substitute the specific <code>Homepage URL</code> and <code>Authorization callback URL</code> for you app.</p> <p>You can create one by filling out the form here.</p> <p></p>"},{"location":"5.-External-Identity-Providers/create-github-application/#form-values","title":"Form Values","text":"<p>For the form values enter the following:</p> <ul> <li><code>ApplicationName</code>: Any name you wish.  In this example we use \"MyIridiumInstance\"</li> <li><code>Homepage URL</code>: http://localhost:4200.</li> <li><code>Authorization callback URL</code>: http://localhost:4200/callback</li> </ul>"},{"location":"5.-External-Identity-Providers/create-github-application/#get-your-client-id","title":"Get your Client ID","text":"<p>After the application is created you'll need to create a secret for it. 1. Make sure to capture your \"Client ID\" value. You'll need while initializing  Iridium 2. Generate a secret for your GitHub application by clicking on the  \"Generate new client secret\" button.  </p>"},{"location":"5.-External-Identity-Providers/create-github-application/#capture-the-github-secret","title":"Capture the GitHub Secret","text":"<ol> <li>After a secret is created you'll need to capture that value to use with the CLI tool.</li> </ol>"},{"location":"6.-The-Iridium-Tracker/overview/","title":"Overview","text":""},{"location":"6.-The-Iridium-Tracker/overview/#the-iridium-tracker","title":"The Iridium Tracker","text":"<p>The tracker is an exploratory effort we are adding to the project to help developers get insights on system usage. We are building the tracker with an MVP mindset.  Tell us what you are looking for in terms of user activity or security  metrics, and we will see what we can do to get it built into the system.</p>"},{"location":"6.-The-Iridium-Tracker/tracker-endpoints/","title":"Tracker endpoints","text":""},{"location":"6.-The-Iridium-Tracker/tracker-endpoints/#get-new-users-grouped-by-provider-over-a-specified-range","title":"Get new users, grouped by provider over a specified range.","text":"<ul> <li>Method: <code>GET</code></li> <li>Endpoint: <code>${serverRoot}/tenants/${tenant-id}/account-types</code></li> </ul>"},{"location":"6.-The-Iridium-Tracker/tracker-endpoints/#query-params","title":"Query Params","text":"Query Parameter Type Description from Date Required This is expected to be in the format of <code>\"yyyy-MM-dd\"</code>.  It must be within 7 days of the current date."},{"location":"6.-The-Iridium-Tracker/tracker-endpoints/#path-variables","title":"Path Variables","text":"Path Variable Type Description tenant-id string Required The tenant identifier. This should be a valid uuid"},{"location":"6.-The-Iridium-Tracker/tracker-endpoints/#headers","title":"Headers","text":"Header Value Description Authorization Bearer ${YourBearerToken} Required The users bearer token"},{"location":"6.-The-Iridium-Tracker/tracker-endpoints/#response","title":"Response:","text":"<ul> <li>If the request is successful the response will look similar to the following:</li> </ul> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\n\n[\n  {\n    \"name\":\"GitHub\",\n    \"value\":56\n  },\n  {\n    \"name\":\"Google\",\n    \"value\":34\n  }\n]\n</code></pre>"},{"location":"6.-The-Iridium-Tracker/tracker-endpoints/#an-example-of-how-to-invoke-is-below","title":"An example of how to invoke is below:","text":"<pre><code>$ curl --location 'localhost:8382/tenants/${SomeTenantId}/account-types?from=2023%2F09%2F28' \\\n--header 'Authorization: Bearer ${YourBearerToken}' \\\n--header 'Accept: application/json'\n</code></pre>"},{"location":"7.-Download/artifacts/","title":"Iridium Downloads","text":""},{"location":"7.-Download/artifacts/#current-version-022","title":"Current Version 0.2.2","text":"Release Link Crypto Files Binary iridium-0.2.2-bin.tar.gz asc, sha512 Source iridium-0.2.2-src.tar.gz asc, sha512"},{"location":"7.-Download/artifacts/#docker-container","title":"Docker Container","text":"Release Link Pull Command Debian iridium-0.2.2-docker docker pull iridiumidentity/iridium-core-server:0.2.2"},{"location":"7.-Download/artifacts/#iridium-examples","title":"Iridium Examples","text":"Location Type Link GitHub Admin UI https://github.com/IridiumIdentity/admin-ui GitHub Angular Quickstart https://github.com/IridiumIdentity/iridium-angular-example GitHub Next.js Quickstart https://github.com/IridiumIdentity/iridium-nextjs-example"},{"location":"8.-Liquibase-H2-DB/liquibase-h2/","title":"Introduction of Liquibase","text":""},{"location":"8.-Liquibase-H2-DB/liquibase-h2/#liquibase-can-help-your-team-deliver-database-changes-faster-easier-and-safer","title":"Liquibase can help your team deliver database changes faster, easier, and safer.","text":""},{"location":"8.-Liquibase-H2-DB/liquibase-h2/#what-problem-does-liquibase-solve","title":"What problem does liquibase solve?","text":"<p>In those enterprise teams who do not use liquibase, developers try to contribute SQL DML statements along with their JAVA code changes before each release.</p> <p>The DBAs would combine each SQL statements into one SQL script files and run them on each database of different envs  (dev, qa, preprod, prod) before the JAVA code get deployed.</p> <p>However, although individual SQL statement works locally, but when multiple SQL statements were combined into one SQL script file, it may contain errors causing the failure of execution the following SQL statements, and it is difficult to  locate the error SQL script file. The deployment of the JAVA code for this release will also fail due to the SQL script execution failure. </p>"},{"location":"8.-Liquibase-H2-DB/liquibase-h2/#how-can-liquibase-help-to-solve-the-above-problem","title":"How can liquibase help to solve the above problem?","text":"<p>Liquiase scripts located inside the resource folder of your sprintboot application. When you run your springboot application, the liquibase script will be executed to make changes in databases before your springboot JAVA code starts.</p> <ol> <li> <p>In relational database like Mysql, MariaDB, Orale and PostgresQL, liquibase script only run once whether    it is completed successfully or failed, because the liquibase framework will initially create a table named databasechangeloglock    in databases  to record the changeset number. When new liquibse script codes were executed, their change set number will be    saved to this table. When you run your springboot application next time, the liquibase script in the previous change set will     be ignored because its change set number exists in the databasechangeloglock table.</p> </li> <li> <p>In in-memory database H2, when your springboot application starts, the database will be created freshly, and all liquibase     code will be executed from the beginning to instruct the creation of new tables, setting up new pf-fk relations, creating     indexes. So the combination of liquibase and h2 is a good testing tool to validate your liquibase script in your local     computer. If there is any errors exit in the liquibase script, your springboot application will not be stated successfully,     and the error log in your console could help you find the error easily. So the errors in your liquibase scrip will be found    locally and will not hurt the shared databases in dev, qa, uat, prod envs.</p> </li> </ol>"}]}